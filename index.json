{
  "api/AshConsoleGraphics.BitBuffer.html": {
    "href": "api/AshConsoleGraphics.BitBuffer.html",
    "title": "Class BitBuffer | AshConsoleGraphics",
    "summary": "Class BitBuffer Namespace AshConsoleGraphics Assembly AshConsoleGraphics.dll Buffer for elements that are connected lines public class BitBuffer Inheritance object BitBuffer Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Constructors BitBuffer(int, int) Initializes a new empty buffer with its size public BitBuffer(int x, int y) Parameters x int y int Properties Xsize public int Xsize { get; } Property Value int Ysize public int Ysize { get; } Property Value int Methods AddBuffer(int, int, BitBuffer) Adds a whole buffer public void AddBuffer(int x, int y, BitBuffer b) Parameters x int The x position of the buffer, top left corner y int The y position of the buffer, top left corner b BitBuffer The other buffer SetAllTrue() Sets the whole buffer to true and returns itself public BitBuffer SetAllTrue() Returns BitBuffer SetBit(int, int, bool) Sets a bit public void SetBit(int x, int y, bool b) Parameters x int The x position of the bit y int The y position of the bit b bool The bit ToBuffer(char[], CharFormat?) Transforms itself to a normal buffer of connected lines public Buffer ToBuffer(char[] chars, CharFormat? def) Parameters chars char[] 16 charachters that are the coneccted line. An example would be \"·───│┌┐┬│└┘┴│├┤┼\" def CharFormat The default format Returns Buffer"
  },
  "api/AshConsoleGraphics.Buffer.html": {
    "href": "api/AshConsoleGraphics.Buffer.html",
    "title": "Class Buffer | AshConsoleGraphics",
    "summary": "Class Buffer Namespace AshConsoleGraphics Assembly AshConsoleGraphics.dll Char and color buffer used for generating elements public class Buffer Inheritance object Buffer Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Constructors Buffer(int, int) Initializes a new empty buffer with its size public Buffer(int x, int y) Parameters x int y int Fields NoFormat Global directive to stop generating buffers with format. Useful for terminals that dont support ansi escape sequences public static bool NoFormat Field Value bool formatBuffer public CharFormat?[] formatBuffer Field Value CharFormat[] Properties Xsize public int Xsize { get; } Property Value int Ysize public int Ysize { get; } Property Value int Methods AddBuffer(int, int, Buffer) Adds a whole buffer public void AddBuffer(int x, int y, Buffer b) Parameters x int The x position of the buffer, top left corner y int The y position of the buffer, top left corner b Buffer The other buffer ReplaceNull(CharFormat?) Replaces the null colors for printing public void ReplaceNull(CharFormat? def) Parameters def CharFormat The default format SetChar(int, int, char?) Sets a char public void SetChar(int x, int y, char? c) Parameters x int The x position of the char y int The y position of the char c char? The char SetChar(int, int, char?, CharFormat?) Sets a char public void SetChar(int x, int y, char? c, CharFormat? f) Parameters x int The x position of the char y int The y position of the char c char? The char f CharFormat The char format ToString(char, CharFormat?) Generates the string representation public string ToString(char defChar, CharFormat? def) Parameters defChar char The default char, usually space def CharFormat The default format Returns string"
  },
  "api/AshConsoleGraphics.ILineElement.html": {
    "href": "api/AshConsoleGraphics.ILineElement.html",
    "title": "Interface ILineElement | AshConsoleGraphics",
    "summary": "Interface ILineElement Namespace AshConsoleGraphics Assembly AshConsoleGraphics.dll Elements that can work as connected lines public interface ILineElement Methods GenerateBitBuffer() BitBuffer GenerateBitBuffer() Returns BitBuffer"
  },
  "api/AshConsoleGraphics.Interactive.MultipleTuiScreenInteractive.html": {
    "href": "api/AshConsoleGraphics.Interactive.MultipleTuiScreenInteractive.html",
    "title": "Class MultipleTuiScreenInteractive | AshConsoleGraphics",
    "summary": "Class MultipleTuiScreenInteractive Namespace AshConsoleGraphics.Interactive Assembly AshConsoleGraphics.dll Screen aimed at handling having multiple interactive screens at the same time, and only controlling one public class MultipleTuiScreenInteractive : TuiScreen, IEnumerable<TuiElement>, IEnumerable Inheritance object TuiElement TuiScreen MultipleTuiScreenInteractive Implements IEnumerable<TuiElement> IEnumerable Inherited Members TuiScreen.Elements TuiScreen.Xsize TuiScreen.Ysize TuiScreen.OnResize TuiScreen.AutoResize TuiScreen.DefFormat TuiScreen.GenerateBuffer() TuiScreen.GetEnumerator() TuiScreen.Print() TuiScreen.BufferNeedsToBeGenerated() TuiScreen.SetAllNoNeedGenerateBuffer() TuiElement.OffsetX TuiElement.OffsetY TuiElement.Placement TuiElement.Buffer TuiElement.needToGenBuffer TuiElement.OnParentResize TuiElement.TriggerUpdate() TuiElement.GetTopLeftPosition(int, int) object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Constructors MultipleTuiScreenInteractive(int, int, IEnumerable<TuiScreenInteractive>, Placement, int, int, CharFormat?, params TuiElement[]) Initializes a new instance of a MultipleTuiScreenInteractive screen. Note that it starts with no selected screen public MultipleTuiScreenInteractive(int xs, int ys, IEnumerable<TuiScreenInteractive> ss, Placement p, int x, int y, CharFormat? f, params TuiElement[] e) Parameters xs int The x size ys int The y size ss IEnumerable<TuiScreenInteractive> All the interactive screens p Placement x int y int f CharFormat The default format e TuiElement[] Additional elements MultipleTuiScreenInteractive(int, int, IEnumerable<TuiScreenInteractive>, CharFormat?, params TuiElement[]) Initializes a new instance of a MultipleTuiScreenInteractive screen. Note that it starts with no selected screen public MultipleTuiScreenInteractive(int xs, int ys, IEnumerable<TuiScreenInteractive> ss, CharFormat? f, params TuiElement[] e) Parameters xs int The x size ys int The y size ss IEnumerable<TuiScreenInteractive> All the interactive screens f CharFormat The default format e TuiElement[] Additional elements Fields WaitForKey If the screen will wait for a key press before updating public bool WaitForKey Field Value bool Properties FinishPlayCycleEvent Action called at the end of each play cycle public Action<MultipleTuiScreenInteractive>? FinishPlayCycleEvent { set; } Property Value Action<MultipleTuiScreenInteractive> KeyFunctions The key actions public Dictionary<(ConsoleKey, ConsoleModifiers), Action<MultipleTuiScreenInteractive, ConsoleKeyInfo>> KeyFunctions { get; } Property Value Dictionary<(ConsoleKey, ConsoleModifiers), Action<MultipleTuiScreenInteractive, ConsoleKeyInfo>> Playing If this screen is playing public bool Playing { get; } Property Value bool ScreenList All the interactive screens public ReactiveList<TuiScreenInteractive> ScreenList { get; } Property Value ReactiveList<TuiScreenInteractive> SelectedScreen The curently selected screen public TuiScreenInteractive SelectedScreen { get; set; } Property Value TuiScreenInteractive Methods DeleteAllKeyEvents() Clears all existent key events and returns itself public MultipleTuiScreenInteractive DeleteAllKeyEvents() Returns MultipleTuiScreenInteractive Play() Plays the interactive screen. Handles all key presses public void Play() StopPlaying(MultipleTuiScreenInteractive, ConsoleKeyInfo) Stop a screen playing public static void StopPlaying(MultipleTuiScreenInteractive s, ConsoleKeyInfo ck) Parameters s MultipleTuiScreenInteractive ck ConsoleKeyInfo SubKeyEvent(ConsoleKey, Action<MultipleTuiScreenInteractive, ConsoleKeyInfo>) Adds a new key event with no modifiers and returns itself public MultipleTuiScreenInteractive SubKeyEvent(ConsoleKey k, Action<MultipleTuiScreenInteractive, ConsoleKeyInfo> keyFunction) Parameters k ConsoleKey keyFunction Action<MultipleTuiScreenInteractive, ConsoleKeyInfo> Returns MultipleTuiScreenInteractive SubKeyEvent(ConsoleKey, ConsoleModifiers, Action<MultipleTuiScreenInteractive, ConsoleKeyInfo>) Adds a new key event and returns itself public MultipleTuiScreenInteractive SubKeyEvent(ConsoleKey k, ConsoleModifiers m, Action<MultipleTuiScreenInteractive, ConsoleKeyInfo> keyFunction) Parameters k ConsoleKey m ConsoleModifiers keyFunction Action<MultipleTuiScreenInteractive, ConsoleKeyInfo> Returns MultipleTuiScreenInteractive"
  },
  "api/AshConsoleGraphics.Interactive.TuiButton.html": {
    "href": "api/AshConsoleGraphics.Interactive.TuiButton.html",
    "title": "Class TuiButton | AshConsoleGraphics",
    "summary": "Class TuiButton Namespace AshConsoleGraphics.Interactive Assembly AshConsoleGraphics.dll A label pressable with enter public class TuiButton : TuiSelectable Inheritance object TuiElement TuiSelectable TuiButton Inherited Members TuiSelectable.Selected TuiSelectable.OnSelection TuiSelectable.KeyFunctions TuiSelectable.SubKeyEvent(ConsoleKey, ConsoleModifiers, Action<TuiSelectable, ConsoleKeyInfo>) TuiSelectable.SubKeyEvent(ConsoleKey, Action<TuiSelectable, ConsoleKeyInfo>) TuiSelectable.DeleteAllKeyEvents() TuiSelectable.HandleKey(ConsoleKeyInfo) TuiElement.OffsetX TuiElement.OffsetY TuiElement.Placement TuiElement.Buffer TuiElement.needToGenBuffer TuiElement.OnParentResize TuiElement.TriggerUpdate() TuiElement.BufferNeedsToBeGenerated() TuiElement.GetTopLeftPosition(int, int) object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Constructors TuiButton(string, Placement, int, int, CharFormat?, CharFormat?) Initializes a new button with the same text color when selected and when not public TuiButton(string t, Placement p, int x, int y, CharFormat? f = null, CharFormat? pf = null) Parameters t string Text to display p Placement x int y int f CharFormat Text format pf CharFormat Selector format TuiButton(string, Placement, int, int, CharFormat?, CharFormat?, CharFormat?) Initializes a new button with all colors public TuiButton(string t, Placement p, int x, int y, CharFormat? f, CharFormat? sf, CharFormat? pf) Parameters t string Text to display p Placement x int y int f CharFormat Not selected text format sf CharFormat Selected text format pf CharFormat Selector format Properties SelectedTextFormat Selected text charachter format public CharFormat? SelectedTextFormat { get; set; } Property Value CharFormat SelectorFormat Format of the selector pads '>' '<' that surround the element when selcted public CharFormat? SelectorFormat { get; set; } Property Value CharFormat Text Text to show public string Text { get; set; } Property Value string TextFormat Not selected text charachter format public CharFormat? TextFormat { get; set; } Property Value CharFormat Methods GenerateBuffer() The method that generates the element's buffer protected override Buffer GenerateBuffer() Returns Buffer SetAction(Action<TuiSelectable, ConsoleKeyInfo>) Sets the enter action of the button public TuiButton SetAction(Action<TuiSelectable, ConsoleKeyInfo> a) Parameters a Action<TuiSelectable, ConsoleKeyInfo> Action Returns TuiButton"
  },
  "api/AshConsoleGraphics.Interactive.TuiCheckBox.html": {
    "href": "api/AshConsoleGraphics.Interactive.TuiCheckBox.html",
    "title": "Class TuiCheckBox | AshConsoleGraphics",
    "summary": "Class TuiCheckBox Namespace AshConsoleGraphics.Interactive Assembly AshConsoleGraphics.dll Checkbox (on/off) public class TuiCheckBox : TuiSelectable Inheritance object TuiElement TuiSelectable TuiCheckBox Derived TuiFramedCheckBox Inherited Members TuiSelectable.Selected TuiSelectable.OnSelection TuiSelectable.KeyFunctions TuiSelectable.SubKeyEvent(ConsoleKey, ConsoleModifiers, Action<TuiSelectable, ConsoleKeyInfo>) TuiSelectable.SubKeyEvent(ConsoleKey, Action<TuiSelectable, ConsoleKeyInfo>) TuiSelectable.DeleteAllKeyEvents() TuiSelectable.HandleKey(ConsoleKeyInfo) TuiElement.OffsetX TuiElement.OffsetY TuiElement.Placement TuiElement.Buffer TuiElement.needToGenBuffer TuiElement.OnParentResize TuiElement.TriggerUpdate() TuiElement.BufferNeedsToBeGenerated() TuiElement.GetTopLeftPosition(int, int) object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Constructors TuiCheckBox(char, char, bool, Placement, int, int, CharFormat?, CharFormat?) Initializes a new framed checkbox with the same colors when selected and not selected public TuiCheckBox(char u, char c, bool b, Placement p, int x, int y, CharFormat? cf = null, CharFormat? pf = null) Parameters u char Unchecked char c char Checked char b bool If the checkbox is initially checked or not p Placement x int y int cf CharFormat Check format pf CharFormat Selector format TuiCheckBox(char, char, bool, Placement, int, int, CharFormat?, CharFormat?, CharFormat?) Initializes a new framed checkbox public TuiCheckBox(char u, char c, bool b, Placement p, int x, int y, CharFormat? cf, CharFormat? scf, CharFormat? pf) Parameters u char Unchecked char c char Checked char b bool If the checkbox is initially checked or not p Placement x int y int cf CharFormat Not selected check format scf CharFormat Selected check format pf CharFormat Selector format Properties CheckFormat Not selected check charachter format public CharFormat? CheckFormat { get; set; } Property Value CharFormat Checked If its checked or not public bool Checked { get; set; } Property Value bool CheckedChar Check carachter when the checkbox is checked public char CheckedChar { get; set; } Property Value char SelectedCheckFormat Selected check charachter format public CharFormat? SelectedCheckFormat { get; set; } Property Value CharFormat SelectorFormat Format of the selector pads '>' '<' that surround the element when selcted public CharFormat? SelectorFormat { get; set; } Property Value CharFormat UnCheckedChar Check carachter when the checkbox is unchecked public char UnCheckedChar { get; set; } Property Value char Methods GenerateBuffer() The method that generates the element's buffer protected override Buffer GenerateBuffer() Returns Buffer"
  },
  "api/AshConsoleGraphics.Interactive.TuiFramedCheckBox.html": {
    "href": "api/AshConsoleGraphics.Interactive.TuiFramedCheckBox.html",
    "title": "Class TuiFramedCheckBox | AshConsoleGraphics",
    "summary": "Class TuiFramedCheckBox Namespace AshConsoleGraphics.Interactive Assembly AshConsoleGraphics.dll Checkbox (on/off) with a frame public class TuiFramedCheckBox : TuiCheckBox Inheritance object TuiElement TuiSelectable TuiCheckBox TuiFramedCheckBox Inherited Members TuiCheckBox.Checked TuiCheckBox.CheckFormat TuiCheckBox.SelectedCheckFormat TuiCheckBox.SelectorFormat TuiCheckBox.UnCheckedChar TuiCheckBox.CheckedChar TuiSelectable.Selected TuiSelectable.OnSelection TuiSelectable.KeyFunctions TuiSelectable.SubKeyEvent(ConsoleKey, ConsoleModifiers, Action<TuiSelectable, ConsoleKeyInfo>) TuiSelectable.SubKeyEvent(ConsoleKey, Action<TuiSelectable, ConsoleKeyInfo>) TuiSelectable.DeleteAllKeyEvents() TuiSelectable.HandleKey(ConsoleKeyInfo) TuiElement.OffsetX TuiElement.OffsetY TuiElement.Placement TuiElement.Buffer TuiElement.needToGenBuffer TuiElement.OnParentResize TuiElement.TriggerUpdate() TuiElement.GetTopLeftPosition(int, int) object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Constructors TuiFramedCheckBox(char, char, bool, Placement, int, int, CharFormat?, CharFormat?, CharFormat?) Initializes a new framed checkbox with defaut frame chars and the same colors when selected and not selected public TuiFramedCheckBox(char u, char c, bool b, Placement p, int x, int y, CharFormat? ff = null, CharFormat? cf = null, CharFormat? pf = null) Parameters u char Unchecked char c char Checked char b bool If the checkbox is initially checked or not p Placement x int y int ff CharFormat Frame format cf CharFormat Check format pf CharFormat Selector format TuiFramedCheckBox(char, char, bool, Placement, int, int, CharFormat?, CharFormat?, CharFormat?, CharFormat?, CharFormat?) Initializes a new framed checkbox with default frame chars ('┌┐└┘──││') public TuiFramedCheckBox(char u, char c, bool b, Placement p, int x, int y, CharFormat? ff, CharFormat? sff, CharFormat? cf, CharFormat? scf, CharFormat? pf) Parameters u char Unchecked char c char Checked char b bool If the checkbox is initially checked or not p Placement x int y int ff CharFormat Not selected frame format sff CharFormat Selected frame format cf CharFormat Not selected check format scf CharFormat Selected check format pf CharFormat Selector format TuiFramedCheckBox(string, char, char, bool, Placement, int, int, CharFormat?, CharFormat?, CharFormat?) Initializes a new framed checkbox with the same colors when selected and not selected public TuiFramedCheckBox(string chars, char u, char c, bool b, Placement p, int x, int y, CharFormat? ff = null, CharFormat? cf = null, CharFormat? pf = null) Parameters chars string Frame charchters u char Unchecked char c char Checked char b bool If the checkbox is initially checked or not p Placement x int y int ff CharFormat Frame format cf CharFormat Check format pf CharFormat Selector format TuiFramedCheckBox(string, char, char, bool, Placement, int, int, CharFormat?, CharFormat?, CharFormat?, CharFormat?, CharFormat?) Initializes a new framed checkbox public TuiFramedCheckBox(string chars, char u, char c, bool b, Placement p, int x, int y, CharFormat? ff, CharFormat? sff, CharFormat? cf, CharFormat? scf, CharFormat? pf) Parameters chars string Frame charchters u char Unchecked char c char Checked char b bool If the checkbox is initially checked or not p Placement x int y int ff CharFormat Not selected frame format sff CharFormat Selected frame format cf CharFormat Not selected check format scf CharFormat Selected check format pf CharFormat Selector format Properties FrameChars Frame charachters. An example would be '┌┐└┘──││' public char[] FrameChars { get; set; } Property Value char[] FrameFormat Not selected frame charachter format public CharFormat? FrameFormat { get; set; } Property Value CharFormat SelectedFrameFormat Selected frame charachter format public CharFormat? SelectedFrameFormat { get; set; } Property Value CharFormat Methods BufferNeedsToBeGenerated() In most cases, the base implementation is enough protected override bool BufferNeedsToBeGenerated() Returns bool GenerateBuffer() The method that generates the element's buffer protected override Buffer GenerateBuffer() Returns Buffer"
  },
  "api/AshConsoleGraphics.Interactive.TuiFramedRadio.html": {
    "href": "api/AshConsoleGraphics.Interactive.TuiFramedRadio.html",
    "title": "Class TuiFramedRadio | AshConsoleGraphics",
    "summary": "Class TuiFramedRadio Namespace AshConsoleGraphics.Interactive Assembly AshConsoleGraphics.dll Radio button: two options, either one or the other public class TuiFramedRadio : TuiSelectable Inheritance object TuiElement TuiSelectable TuiFramedRadio Inherited Members TuiSelectable.Selected TuiSelectable.OnSelection TuiSelectable.KeyFunctions TuiSelectable.SubKeyEvent(ConsoleKey, ConsoleModifiers, Action<TuiSelectable, ConsoleKeyInfo>) TuiSelectable.SubKeyEvent(ConsoleKey, Action<TuiSelectable, ConsoleKeyInfo>) TuiSelectable.DeleteAllKeyEvents() TuiSelectable.HandleKey(ConsoleKeyInfo) TuiElement.OffsetX TuiElement.OffsetY TuiElement.Placement TuiElement.Buffer TuiElement.needToGenBuffer TuiElement.OnParentResize TuiElement.TriggerUpdate() TuiElement.GetTopLeftPosition(int, int) object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Constructors TuiFramedRadio(char, char, string, string, Placement, int, int, CharFormat?, CharFormat?, CharFormat?, CharFormat?) Initializes a new radio button with default frame chars ('┌┐└┘──││') and the same colors for selected and not selected public TuiFramedRadio(char u, char c, string lo, string ro, Placement p, int x, int y, CharFormat? ff = null, CharFormat? cf = null, CharFormat? tf = null, CharFormat? pf = null) Parameters u char Unchecked char c char Checked char lo string Left option ro string Right option p Placement x int y int ff CharFormat Frame format cf CharFormat Check format tf CharFormat Text format pf CharFormat Selector format TuiFramedRadio(char, char, string, string, Placement, int, int, CharFormat?, CharFormat?, CharFormat?, CharFormat?, CharFormat?, CharFormat?, CharFormat?) Initializes a new radio button with default frame chars ('┌┐└┘──││') public TuiFramedRadio(char u, char c, string lo, string ro, Placement p, int x, int y, CharFormat? ff, CharFormat? sff, CharFormat? cf, CharFormat? scf, CharFormat? tf, CharFormat? stf, CharFormat? pf) Parameters u char Unchecked char c char Checked char lo string Left option ro string Right option p Placement x int y int ff CharFormat Not selected frame format sff CharFormat Selected frame format cf CharFormat Not selected check format scf CharFormat Selected check format tf CharFormat Not selected text format stf CharFormat Selected text format pf CharFormat Selector format TuiFramedRadio(string, char, char, string, string, Placement, int, int, CharFormat?, CharFormat?, CharFormat?, CharFormat?) Initializes a new radio button with the same colors when selected and when not public TuiFramedRadio(string chars, char u, char c, string lo, string ro, Placement p, int x, int y, CharFormat? ff = null, CharFormat? cf = null, CharFormat? tf = null, CharFormat? pf = null) Parameters chars string Frame charchters u char Unchecked char c char Checked char lo string Left option ro string Right option p Placement x int y int ff CharFormat Frame format cf CharFormat Check format tf CharFormat Text format pf CharFormat Selector format TuiFramedRadio(string, char, char, string, string, Placement, int, int, CharFormat?, CharFormat?, CharFormat?, CharFormat?, CharFormat?, CharFormat?, CharFormat?) Initializes a new radio button public TuiFramedRadio(string chars, char u, char c, string lo, string ro, Placement p, int x, int y, CharFormat? ff, CharFormat? sff, CharFormat? cf, CharFormat? scf, CharFormat? tf, CharFormat? stf, CharFormat? pf) Parameters chars string Frame charchters u char Unchecked char c char Checked char lo string Left option ro string Right option p Placement x int y int ff CharFormat Not selected frame format sff CharFormat Selected frame format cf CharFormat Not selected check format scf CharFormat Selected check format tf CharFormat Not selected text format stf CharFormat Selected text format pf CharFormat Selector format Properties CheckFormat Not selected check charachter format public CharFormat? CheckFormat { get; set; } Property Value CharFormat CheckedChar Check carachter when the checkbox is checked public char CheckedChar { get; set; } Property Value char FrameChars Frame charachters. An example would be '┌┐└┘──││' public char[] FrameChars { get; set; } Property Value char[] FrameFormat Not selected frame charachter format public CharFormat? FrameFormat { get; set; } Property Value CharFormat LeftOption Left option public string LeftOption { get; set; } Property Value string RightOption Right option public string RightOption { get; set; } Property Value string RightOptionChecked If the right option is checked(true) or the left one(false) public bool RightOptionChecked { get; set; } Property Value bool SelectedCheckFormat Selected check charachter format public CharFormat? SelectedCheckFormat { get; set; } Property Value CharFormat SelectedFrameFormat Selected frame charachter format public CharFormat? SelectedFrameFormat { get; set; } Property Value CharFormat SelectedTextFormat Selected text charachter format public CharFormat? SelectedTextFormat { get; set; } Property Value CharFormat SelectorFormat Format of the selector pads '>' '<' that surround the element when selcted public CharFormat? SelectorFormat { get; set; } Property Value CharFormat TextFormat Not selected text charachter format public CharFormat? TextFormat { get; set; } Property Value CharFormat UnCheckedChar Check carachter when the checkbox is unchecked public char UnCheckedChar { get; set; } Property Value char Methods BufferNeedsToBeGenerated() In most cases, the base implementation is enough protected override bool BufferNeedsToBeGenerated() Returns bool GenerateBuffer() The method that generates the element's buffer protected override Buffer GenerateBuffer() Returns Buffer"
  },
  "api/AshConsoleGraphics.Interactive.TuiFramedScrollingTextBox.html": {
    "href": "api/AshConsoleGraphics.Interactive.TuiFramedScrollingTextBox.html",
    "title": "Class TuiFramedScrollingTextBox | AshConsoleGraphics",
    "summary": "Class TuiFramedScrollingTextBox Namespace AshConsoleGraphics.Interactive Assembly AshConsoleGraphics.dll A textbox where you can write inside a frame and it lets you write longer than the visible length of the box public class TuiFramedScrollingTextBox : TuiWritable Inheritance object TuiElement TuiSelectable TuiWritable TuiFramedScrollingTextBox Inherited Members TuiWritable.Text TuiWritable.Length TuiWritable.CanWriteChar TuiWritable.OnLengthChange TuiWritable.HandleKey(ConsoleKeyInfo) TuiWritable.DelChar() TuiSelectable.Selected TuiSelectable.OnSelection TuiSelectable.KeyFunctions TuiSelectable.SubKeyEvent(ConsoleKey, ConsoleModifiers, Action<TuiSelectable, ConsoleKeyInfo>) TuiSelectable.SubKeyEvent(ConsoleKey, Action<TuiSelectable, ConsoleKeyInfo>) TuiSelectable.DeleteAllKeyEvents() TuiElement.OffsetX TuiElement.OffsetY TuiElement.Placement TuiElement.Buffer TuiElement.needToGenBuffer TuiElement.OnParentResize TuiElement.TriggerUpdate() TuiElement.GetTopLeftPosition(int, int) object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Constructors TuiFramedScrollingTextBox(string, int, int, Placement, int, int, CharFormat?, CharFormat?, CharFormat?) Initializes a new scrolling textbox with default frame chars ('┌┐└┘──││') and same colors for selected and not selected public TuiFramedScrollingTextBox(string t, int l, int bl, Placement p, int x, int y, CharFormat? ff = null, CharFormat? tf = null, CharFormat? pf = null) Parameters t string Initial text l int Max text length bl int Visible textbox length p Placement x int y int ff CharFormat Frame format tf CharFormat Text format pf CharFormat Selector format TuiFramedScrollingTextBox(string, int, int, Placement, int, int, CharFormat?, CharFormat?, CharFormat?, CharFormat?, CharFormat?) Initializes a new scrolling textbox with default frame chars ('┌┐└┘──││') public TuiFramedScrollingTextBox(string t, int l, int bl, Placement p, int x, int y, CharFormat? ff, CharFormat? sff, CharFormat? tf, CharFormat? stf, CharFormat? pf) Parameters t string Initial text l int Max text length bl int Visible textbox length p Placement x int y int ff CharFormat Not selected frame format sff CharFormat Selected frame format tf CharFormat Not selected text format stf CharFormat Selected text format pf CharFormat Selector format TuiFramedScrollingTextBox(string, string, int, int, Placement, int, int, CharFormat?, CharFormat?, CharFormat?) Initializes a new scrolling textbox with the same colors when selected and not selected public TuiFramedScrollingTextBox(string chars, string t, int l, int bl, Placement p, int x, int y, CharFormat? ff = null, CharFormat? tf = null, CharFormat? pf = null) Parameters chars string Frame charchters t string Initial text l int Max text length bl int Visible textbox length p Placement x int y int ff CharFormat Frame format tf CharFormat Text format pf CharFormat Selector format TuiFramedScrollingTextBox(string, string, int, int, Placement, int, int, CharFormat?, CharFormat?, CharFormat?, CharFormat?, CharFormat?) Initializes a new scrolling textbox public TuiFramedScrollingTextBox(string chars, string t, int l, int bl, Placement p, int x, int y, CharFormat? ff, CharFormat? sff, CharFormat? tf, CharFormat? stf, CharFormat? pf) Parameters chars string Frame charchters t string Initial text l int Max text length bl int Visible textbox length p Placement x int y int ff CharFormat Not selected frame format sff CharFormat Selected frame format tf CharFormat Not selected text format stf CharFormat Selected text format pf CharFormat Selector format Properties BoxXsize The visible X size of the box public int BoxXsize { get; set; } Property Value int FrameChars Frame charachters. An example would be '┌┐└┘──││' public char[] FrameChars { get; set; } Property Value char[] FrameFormat Not selected frame charachter format public CharFormat? FrameFormat { get; set; } Property Value CharFormat SelectedFrameFormat Selected frame charachter format public CharFormat? SelectedFrameFormat { get; set; } Property Value CharFormat SelectedTextFormat Selected text charachter format public CharFormat? SelectedTextFormat { get; set; } Property Value CharFormat SelectorFormat Format of the selector pads '>' '<' that surround the element when selcted public CharFormat? SelectorFormat { get; set; } Property Value CharFormat TextFormat Not selected text charachter format public CharFormat? TextFormat { get; set; } Property Value CharFormat Methods BufferNeedsToBeGenerated() In most cases, the base implementation is enough protected override bool BufferNeedsToBeGenerated() Returns bool GenerateBuffer() The method that generates the element's buffer protected override Buffer GenerateBuffer() Returns Buffer"
  },
  "api/AshConsoleGraphics.Interactive.TuiFramedTextBox.html": {
    "href": "api/AshConsoleGraphics.Interactive.TuiFramedTextBox.html",
    "title": "Class TuiFramedTextBox | AshConsoleGraphics",
    "summary": "Class TuiFramedTextBox Namespace AshConsoleGraphics.Interactive Assembly AshConsoleGraphics.dll A textbox where you can write inside a frame public class TuiFramedTextBox : TuiWritable Inheritance object TuiElement TuiSelectable TuiWritable TuiFramedTextBox Inherited Members TuiWritable.Text TuiWritable.Length TuiWritable.CanWriteChar TuiWritable.OnLengthChange TuiWritable.HandleKey(ConsoleKeyInfo) TuiWritable.DelChar() TuiSelectable.Selected TuiSelectable.OnSelection TuiSelectable.KeyFunctions TuiSelectable.SubKeyEvent(ConsoleKey, ConsoleModifiers, Action<TuiSelectable, ConsoleKeyInfo>) TuiSelectable.SubKeyEvent(ConsoleKey, Action<TuiSelectable, ConsoleKeyInfo>) TuiSelectable.DeleteAllKeyEvents() TuiElement.OffsetX TuiElement.OffsetY TuiElement.Placement TuiElement.Buffer TuiElement.needToGenBuffer TuiElement.OnParentResize TuiElement.TriggerUpdate() TuiElement.GetTopLeftPosition(int, int) object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Constructors TuiFramedTextBox(string, int, Placement, int, int, CharFormat?, CharFormat?, CharFormat?) Initializes a new textbox with default frame chars ('┌┐└┘──││') and same colors for selected and not selected public TuiFramedTextBox(string t, int l, Placement p, int x, int y, CharFormat? ff = null, CharFormat? tf = null, CharFormat? pf = null) Parameters t string Initial text l int Textbox length p Placement x int y int ff CharFormat Frame format tf CharFormat Text format pf CharFormat Selector format TuiFramedTextBox(string, int, Placement, int, int, CharFormat?, CharFormat?, CharFormat?, CharFormat?, CharFormat?) Initializes a new textbox with default frame chars ('┌┐└┘──││') public TuiFramedTextBox(string t, int l, Placement p, int x, int y, CharFormat? ff, CharFormat? sff, CharFormat? tf, CharFormat? stf, CharFormat? pf) Parameters t string Initial text l int Textbox length p Placement x int y int ff CharFormat Not selected frame format sff CharFormat Selected frame format tf CharFormat Not selected text format stf CharFormat Selected text format pf CharFormat Selector format TuiFramedTextBox(string, string, int, Placement, int, int, CharFormat?, CharFormat?, CharFormat?) Initializes a new textbox with the same colors when selected and not selected public TuiFramedTextBox(string chars, string t, int l, Placement p, int x, int y, CharFormat? ff = null, CharFormat? tf = null, CharFormat? pf = null) Parameters chars string Frame charchters t string Initial text l int Textbox length p Placement x int y int ff CharFormat Frame format tf CharFormat Text format pf CharFormat Selector format TuiFramedTextBox(string, string, int, Placement, int, int, CharFormat?, CharFormat?, CharFormat?, CharFormat?, CharFormat?) Initializes a new textbox public TuiFramedTextBox(string chars, string t, int l, Placement p, int x, int y, CharFormat? ff, CharFormat? sff, CharFormat? tf, CharFormat? stf, CharFormat? pf) Parameters chars string Frame charchters t string Initial text l int Textbox length p Placement x int y int ff CharFormat Not selected frame format sff CharFormat Selected frame format tf CharFormat Not selected text format stf CharFormat Selected text format pf CharFormat Selector format Properties FrameChars Frame charachters. An example would be '┌┐└┘──││' public char[] FrameChars { get; set; } Property Value char[] FrameFormat Not selected frame charachter format public CharFormat? FrameFormat { get; set; } Property Value CharFormat SelectedFrameFormat Selected frame charachter format public CharFormat? SelectedFrameFormat { get; set; } Property Value CharFormat SelectedTextFormat Selected text charachter format public CharFormat? SelectedTextFormat { get; set; } Property Value CharFormat SelectorFormat Format of the selector pads '>' '<' that surround the element when selcted public CharFormat? SelectorFormat { get; set; } Property Value CharFormat TextFormat Not selected text charachter format public CharFormat? TextFormat { get; set; } Property Value CharFormat Methods BufferNeedsToBeGenerated() In most cases, the base implementation is enough protected override bool BufferNeedsToBeGenerated() Returns bool GenerateBuffer() The method that generates the element's buffer protected override Buffer GenerateBuffer() Returns Buffer"
  },
  "api/AshConsoleGraphics.Interactive.TuiMultiLineFramedTextBox.html": {
    "href": "api/AshConsoleGraphics.Interactive.TuiMultiLineFramedTextBox.html",
    "title": "Class TuiMultiLineFramedTextBox | AshConsoleGraphics",
    "summary": "Class TuiMultiLineFramedTextBox Namespace AshConsoleGraphics.Interactive Assembly AshConsoleGraphics.dll A textbox where you can write inside a frame that can be several lines in height public class TuiMultiLineFramedTextBox : TuiWritable Inheritance object TuiElement TuiSelectable TuiWritable TuiMultiLineFramedTextBox Inherited Members TuiWritable.Text TuiWritable.Length TuiWritable.CanWriteChar TuiWritable.OnLengthChange TuiWritable.HandleKey(ConsoleKeyInfo) TuiWritable.DelChar() TuiSelectable.Selected TuiSelectable.OnSelection TuiSelectable.KeyFunctions TuiSelectable.SubKeyEvent(ConsoleKey, ConsoleModifiers, Action<TuiSelectable, ConsoleKeyInfo>) TuiSelectable.SubKeyEvent(ConsoleKey, Action<TuiSelectable, ConsoleKeyInfo>) TuiSelectable.DeleteAllKeyEvents() TuiElement.OffsetX TuiElement.OffsetY TuiElement.Placement TuiElement.Buffer TuiElement.needToGenBuffer TuiElement.OnParentResize TuiElement.TriggerUpdate() TuiElement.GetTopLeftPosition(int, int) object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Constructors TuiMultiLineFramedTextBox(string, int, int, Placement, int, int, CharFormat?, CharFormat?, CharFormat?) Initializes a new multiline textbox with default frame chars ('┌┐└┘──││') and same colors for selected and not selected public TuiMultiLineFramedTextBox(string t, int xs, int ys, Placement p, int x, int y, CharFormat? ff = null, CharFormat? tf = null, CharFormat? pf = null) Parameters t string Initial text xs int Box X size ys int Box Y size p Placement x int y int ff CharFormat Frame format tf CharFormat Text format pf CharFormat Selector format TuiMultiLineFramedTextBox(string, int, int, Placement, int, int, CharFormat?, CharFormat?, CharFormat?, CharFormat?, CharFormat?) Initializes a new multiline textbox with default frame chars ('┌┐└┘──││') public TuiMultiLineFramedTextBox(string t, int xs, int ys, Placement p, int x, int y, CharFormat? ff, CharFormat? sff, CharFormat? tf, CharFormat? stf, CharFormat? pf) Parameters t string Initial text xs int Box X size ys int Box Y size p Placement x int y int ff CharFormat Not selected frame format sff CharFormat Selected frame format tf CharFormat Not selected text format stf CharFormat Selected text format pf CharFormat Selector format TuiMultiLineFramedTextBox(string, string, int, int, Placement, int, int, CharFormat?, CharFormat?, CharFormat?) Initializes a new multiline textbox with the same colors when selected and not selected public TuiMultiLineFramedTextBox(string chars, string t, int xs, int ys, Placement p, int x, int y, CharFormat? ff = null, CharFormat? tf = null, CharFormat? pf = null) Parameters chars string Frame charchters t string Initial text xs int Box X size ys int Box Y size p Placement x int y int ff CharFormat Frame format tf CharFormat Text format pf CharFormat Selector format TuiMultiLineFramedTextBox(string, string, int, int, Placement, int, int, CharFormat?, CharFormat?, CharFormat?, CharFormat?, CharFormat?) Initializes a new multiline textbox public TuiMultiLineFramedTextBox(string chars, string t, int xs, int ys, Placement p, int x, int y, CharFormat? ff, CharFormat? sff, CharFormat? tf, CharFormat? stf, CharFormat? pf) Parameters chars string Frame charchters t string Initial text xs int Box X size ys int Box Y size p Placement x int y int ff CharFormat Not selected frame format sff CharFormat Selected frame format tf CharFormat Not selected text format stf CharFormat Selected text format pf CharFormat Selector format Properties BoxXsize The visible X size of the box. Length is xsize * ysize public int BoxXsize { get; set; } Property Value int BoxYsize The visible Y size of the box. Length is xsize * ysize public int BoxYsize { get; set; } Property Value int FrameChars Frame charachters. An example would be '┌┐└┘──││' public char[] FrameChars { get; set; } Property Value char[] FrameFormat Not selected frame charachter format public CharFormat? FrameFormat { get; set; } Property Value CharFormat SelectedFrameFormat Selected frame charachter format public CharFormat? SelectedFrameFormat { get; set; } Property Value CharFormat SelectedTextFormat Selected text charachter format public CharFormat? SelectedTextFormat { get; set; } Property Value CharFormat SelectorFormat Format of the selector pads '>' '<' that surround the element when selcted public CharFormat? SelectorFormat { get; set; } Property Value CharFormat TextFormat Not selected text charachter format public CharFormat? TextFormat { get; set; } Property Value CharFormat Methods BufferNeedsToBeGenerated() In most cases, the base implementation is enough protected override bool BufferNeedsToBeGenerated() Returns bool GenerateBuffer() The method that generates the element's buffer protected override Buffer GenerateBuffer() Returns Buffer"
  },
  "api/AshConsoleGraphics.Interactive.TuiMultiLineScrollingFramedTextBox.html": {
    "href": "api/AshConsoleGraphics.Interactive.TuiMultiLineScrollingFramedTextBox.html",
    "title": "Class TuiMultiLineScrollingFramedTextBox | AshConsoleGraphics",
    "summary": "Class TuiMultiLineScrollingFramedTextBox Namespace AshConsoleGraphics.Interactive Assembly AshConsoleGraphics.dll A textbox where you can write inside a frame that can be several lines in height and scrolls public class TuiMultiLineScrollingFramedTextBox : TuiWritable Inheritance object TuiElement TuiSelectable TuiWritable TuiMultiLineScrollingFramedTextBox Inherited Members TuiWritable.Text TuiWritable.Length TuiWritable.CanWriteChar TuiWritable.OnLengthChange TuiWritable.HandleKey(ConsoleKeyInfo) TuiWritable.DelChar() TuiSelectable.Selected TuiSelectable.OnSelection TuiSelectable.KeyFunctions TuiSelectable.SubKeyEvent(ConsoleKey, ConsoleModifiers, Action<TuiSelectable, ConsoleKeyInfo>) TuiSelectable.SubKeyEvent(ConsoleKey, Action<TuiSelectable, ConsoleKeyInfo>) TuiSelectable.DeleteAllKeyEvents() TuiElement.OffsetX TuiElement.OffsetY TuiElement.Placement TuiElement.Buffer TuiElement.needToGenBuffer TuiElement.OnParentResize TuiElement.TriggerUpdate() TuiElement.GetTopLeftPosition(int, int) object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Constructors TuiMultiLineScrollingFramedTextBox(string, int, int, int, Placement, int, int, CharFormat?, CharFormat?, CharFormat?) Initializes a new multiline textbox with default frame chars ('┌┐└┘──││') and same colors for selected and not selected public TuiMultiLineScrollingFramedTextBox(string t, int l, int xs, int ys, Placement p, int x, int y, CharFormat? ff = null, CharFormat? tf = null, CharFormat? pf = null) Parameters t string Initial text l int xs int Box X size ys int Box Y size p Placement x int y int ff CharFormat Frame format tf CharFormat Text format pf CharFormat Selector format TuiMultiLineScrollingFramedTextBox(string, int, int, int, Placement, int, int, CharFormat?, CharFormat?, CharFormat?, CharFormat?, CharFormat?) Initializes a new multiline textbox with default frame chars ('┌┐└┘──││') public TuiMultiLineScrollingFramedTextBox(string t, int l, int xs, int ys, Placement p, int x, int y, CharFormat? ff, CharFormat? sff, CharFormat? tf, CharFormat? stf, CharFormat? pf) Parameters t string Initial text l int xs int Box X size ys int Box Y size p Placement x int y int ff CharFormat Not selected frame format sff CharFormat Selected frame format tf CharFormat Not selected text format stf CharFormat Selected text format pf CharFormat Selector format TuiMultiLineScrollingFramedTextBox(string, string, int, int, int, Placement, int, int, CharFormat?, CharFormat?, CharFormat?) Initializes a new multiline textbox with the same colors when selected and not selected public TuiMultiLineScrollingFramedTextBox(string chars, string t, int l, int xs, int ys, Placement p, int x, int y, CharFormat? ff = null, CharFormat? tf = null, CharFormat? pf = null) Parameters chars string Frame charchters t string Initial text l int xs int Box X size ys int Box Y size p Placement x int y int ff CharFormat Frame format tf CharFormat Text format pf CharFormat Selector format TuiMultiLineScrollingFramedTextBox(string, string, int, int, int, Placement, int, int, CharFormat?, CharFormat?, CharFormat?, CharFormat?, CharFormat?) Initializes a new multiline textbox public TuiMultiLineScrollingFramedTextBox(string chars, string t, int l, int xs, int ys, Placement p, int x, int y, CharFormat? ff, CharFormat? sff, CharFormat? tf, CharFormat? stf, CharFormat? pf) Parameters chars string Frame charchters t string Initial text l int xs int Box X size ys int Box Y size p Placement x int y int ff CharFormat Not selected frame format sff CharFormat Selected frame format tf CharFormat Not selected text format stf CharFormat Selected text format pf CharFormat Selector format Properties BoxXsize The visible X size of the box. public int BoxXsize { get; set; } Property Value int BoxYsize The visible Y size of the box public int BoxYsize { get; set; } Property Value int FrameChars Frame charachters. An example would be '┌┐└┘──││' public char[] FrameChars { get; set; } Property Value char[] FrameFormat Not selected frame charachter format public CharFormat? FrameFormat { get; set; } Property Value CharFormat SelectedFrameFormat Selected frame charachter format public CharFormat? SelectedFrameFormat { get; set; } Property Value CharFormat SelectedTextFormat Selected text charachter format public CharFormat? SelectedTextFormat { get; set; } Property Value CharFormat SelectorFormat Format of the selector pads '>' '<' that surround the element when selcted public CharFormat? SelectorFormat { get; set; } Property Value CharFormat TextFormat Not selected text charachter format public CharFormat? TextFormat { get; set; } Property Value CharFormat Methods BufferNeedsToBeGenerated() In most cases, the base implementation is enough protected override bool BufferNeedsToBeGenerated() Returns bool GenerateBuffer() The method that generates the element's buffer protected override Buffer GenerateBuffer() Returns Buffer"
  },
  "api/AshConsoleGraphics.Interactive.TuiNumberPicker.html": {
    "href": "api/AshConsoleGraphics.Interactive.TuiNumberPicker.html",
    "title": "Class TuiNumberPicker | AshConsoleGraphics",
    "summary": "Class TuiNumberPicker Namespace AshConsoleGraphics.Interactive Assembly AshConsoleGraphics.dll Lets you pick between a number range with the lateral arrows public class TuiNumberPicker : TuiSelectable Inheritance object TuiElement TuiSelectable TuiNumberPicker Inherited Members TuiSelectable.Selected TuiSelectable.OnSelection TuiSelectable.KeyFunctions TuiSelectable.SubKeyEvent(ConsoleKey, ConsoleModifiers, Action<TuiSelectable, ConsoleKeyInfo>) TuiSelectable.SubKeyEvent(ConsoleKey, Action<TuiSelectable, ConsoleKeyInfo>) TuiSelectable.DeleteAllKeyEvents() TuiSelectable.HandleKey(ConsoleKeyInfo) TuiElement.OffsetX TuiElement.OffsetY TuiElement.Placement TuiElement.Buffer TuiElement.needToGenBuffer TuiElement.OnParentResize TuiElement.TriggerUpdate() TuiElement.BufferNeedsToBeGenerated() TuiElement.GetTopLeftPosition(int, int) object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Constructors TuiNumberPicker(int, int, int, int, Placement, int, int, CharFormat?, CharFormat?) Initializes a new number picker with the same text color when selected and when not public TuiNumberPicker(int lower, int upper, int interval, int num, Placement p, int x, int y, CharFormat? f = null, CharFormat? pf = null) Parameters lower int Lower bound upper int Upper bound interval int Increment interval num int Initial selected number p Placement x int y int f CharFormat Text format pf CharFormat Selector format TuiNumberPicker(int, int, int, int, Placement, int, int, CharFormat?, CharFormat?, CharFormat?) Initializes a new number picker with all colors public TuiNumberPicker(int lower, int upper, int interval, int num, Placement p, int x, int y, CharFormat? f, CharFormat? sf, CharFormat? pf) Parameters lower int Lower bound upper int Upper bound interval int Increment interval num int Initial selected number p Placement x int y int f CharFormat Not selected text format sf CharFormat Selected text format pf CharFormat Selector format Exceptions ArgumentException Thrown when lower isgreater than upper Fields Interval What the selected number will be incremented/decremented each time an arrow is pressed public int Interval Field Value int Properties LowerLimit Lower bound on the number public int LowerLimit { get; set; } Property Value int Number Selected number public int Number { get; set; } Property Value int SelectedTextFormat Selected text charachter format public CharFormat? SelectedTextFormat { get; set; } Property Value CharFormat SelectorFormat Format of the selector pads '>' '<' that surround the element when selcted public CharFormat? SelectorFormat { get; set; } Property Value CharFormat TextFormat Not selected text charachter format public CharFormat? TextFormat { get; set; } Property Value CharFormat UpperLimit Upper bound on the number public int UpperLimit { get; set; } Property Value int Methods GenerateBuffer() The method that generates the element's buffer protected override Buffer GenerateBuffer() Returns Buffer NumberDown(TuiSelectable, ConsoleKeyInfo) Decrements the number by the interval public void NumberDown(TuiSelectable s, ConsoleKeyInfo ck) Parameters s TuiSelectable ck ConsoleKeyInfo NumberUp(TuiSelectable, ConsoleKeyInfo) Increments the number by the interval public void NumberUp(TuiSelectable s, ConsoleKeyInfo ck) Parameters s TuiSelectable ck ConsoleKeyInfo"
  },
  "api/AshConsoleGraphics.Interactive.TuiOptionPicker.html": {
    "href": "api/AshConsoleGraphics.Interactive.TuiOptionPicker.html",
    "title": "Class TuiOptionPicker | AshConsoleGraphics",
    "summary": "Class TuiOptionPicker Namespace AshConsoleGraphics.Interactive Assembly AshConsoleGraphics.dll Lets you pick options with the lateral arrows public class TuiOptionPicker : TuiSelectable Inheritance object TuiElement TuiSelectable TuiOptionPicker Inherited Members TuiSelectable.Selected TuiSelectable.OnSelection TuiSelectable.KeyFunctions TuiSelectable.SubKeyEvent(ConsoleKey, ConsoleModifiers, Action<TuiSelectable, ConsoleKeyInfo>) TuiSelectable.SubKeyEvent(ConsoleKey, Action<TuiSelectable, ConsoleKeyInfo>) TuiSelectable.DeleteAllKeyEvents() TuiSelectable.HandleKey(ConsoleKeyInfo) TuiElement.OffsetX TuiElement.OffsetY TuiElement.Placement TuiElement.Buffer TuiElement.needToGenBuffer TuiElement.OnParentResize TuiElement.TriggerUpdate() TuiElement.BufferNeedsToBeGenerated() TuiElement.GetTopLeftPosition(int, int) object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Constructors TuiOptionPicker(string[], Placement, int, int, CharFormat?, CharFormat?) Initializes a new option picker with selected option 0 with the same text color when selected and when not public TuiOptionPicker(string[] t, Placement p, int x, int y, CharFormat? f = null, CharFormat? pf = null) Parameters t string[] All options p Placement x int y int f CharFormat Text format pf CharFormat Selector format TuiOptionPicker(string[], Placement, int, int, CharFormat?, CharFormat?, CharFormat?) Initializes a new option picker with selected option 0 with all colors public TuiOptionPicker(string[] t, Placement p, int x, int y, CharFormat? f, CharFormat? sf, CharFormat? pf) Parameters t string[] All options p Placement x int y int f CharFormat Not selected text format sf CharFormat Selected text format pf CharFormat Selector format TuiOptionPicker(string[], uint, Placement, int, int, CharFormat?, CharFormat?) Initializes a new option picker with the same text color when selected and when not public TuiOptionPicker(string[] t, uint so, Placement p, int x, int y, CharFormat? f = null, CharFormat? pf = null) Parameters t string[] All options so uint Index of the selected option p Placement x int y int f CharFormat Text format pf CharFormat Selector format TuiOptionPicker(string[], uint, Placement, int, int, CharFormat?, CharFormat?, CharFormat?) Initializes a new option picker with all colors public TuiOptionPicker(string[] t, uint so, Placement p, int x, int y, CharFormat? f, CharFormat? sf, CharFormat? pf) Parameters t string[] All options so uint Index of the selected option p Placement x int y int f CharFormat Not selected text format sf CharFormat Selected text format pf CharFormat Selector format Exceptions ArgumentException Thrown when t is null or no option was provided (length 0) Properties Options The options public string[] Options { get; } Property Value string[] SelectedOption The selected option. Get only public string SelectedOption { get; } Property Value string SelectedOptionIndex The index in Options of the selected option public uint SelectedOptionIndex { get; set; } Property Value uint SelectedTextFormat Selected text charachter format public CharFormat? SelectedTextFormat { get; set; } Property Value CharFormat SelectorFormat Format of the selector pads '>' '<' that surround the element when selcted public CharFormat? SelectorFormat { get; set; } Property Value CharFormat TextFormat Not selected text charachter format public CharFormat? TextFormat { get; set; } Property Value CharFormat Methods GenerateBuffer() The method that generates the element's buffer protected override Buffer GenerateBuffer() Returns Buffer"
  },
  "api/AshConsoleGraphics.Interactive.TuiScreenInteractive.html": {
    "href": "api/AshConsoleGraphics.Interactive.TuiScreenInteractive.html",
    "title": "Class TuiScreenInteractive | AshConsoleGraphics",
    "summary": "Class TuiScreenInteractive Namespace AshConsoleGraphics.Interactive Assembly AshConsoleGraphics.dll Interactive screen with selectables and key actions public class TuiScreenInteractive : TuiScreen, IEnumerable<TuiElement>, IEnumerable Inheritance object TuiElement TuiScreen TuiScreenInteractive Implements IEnumerable<TuiElement> IEnumerable Derived TuiScrollingScreenInteractive Inherited Members TuiScreen.Elements TuiScreen.Xsize TuiScreen.Ysize TuiScreen.OnResize TuiScreen.AutoResize TuiScreen.DefFormat TuiScreen.GenerateBuffer() TuiScreen.GetEnumerator() TuiScreen.Print() TuiScreen.BufferNeedsToBeGenerated() TuiScreen.SetAllNoNeedGenerateBuffer() TuiElement.OffsetX TuiElement.OffsetY TuiElement.Placement TuiElement.Buffer TuiElement.needToGenBuffer TuiElement.OnParentResize TuiElement.TriggerUpdate() TuiElement.GetTopLeftPosition(int, int) object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Constructors TuiScreenInteractive(int, int, TuiSelectable[,], uint, uint, Placement, int, int, CharFormat?, params TuiElement[]) Initializes a new interactive screen public TuiScreenInteractive(int xs, int ys, TuiSelectable[,] sm, uint startX, uint startY, Placement p, int x, int y, CharFormat? f, params TuiElement[] e) Parameters xs int The x size ys int The y size sm TuiSelectable[,] Selectable matrix startX uint Start X index in the selectable matrix startY uint Start Y index in the selectable matrix p Placement x int y int f CharFormat The default format e TuiElement[] Additional elements TuiScreenInteractive(int, int, TuiSelectable[,], uint, uint, CharFormat?, params TuiElement[]) Initializes a new interactive screen public TuiScreenInteractive(int xs, int ys, TuiSelectable[,] sm, uint startX, uint startY, CharFormat? f, params TuiElement[] e) Parameters xs int The x size ys int The y size sm TuiSelectable[,] Selectable matrix startX uint Start X index in the selectable matrix startY uint Start Y index in the selectable matrix f CharFormat The default format e TuiElement[] Additional elements Fields WaitForKey If the screen will wait for a key press before updating public bool WaitForKey Field Value bool Properties FinishPlayCycleEvent Action called at the end of each play cycle public Action<TuiScreenInteractive>? FinishPlayCycleEvent { set; } Property Value Action<TuiScreenInteractive> KeyFunctions The key actions public Dictionary<(ConsoleKey, ConsoleModifiers), Action<TuiScreenInteractive, ConsoleKeyInfo>> KeyFunctions { get; } Property Value Dictionary<(ConsoleKey, ConsoleModifiers), Action<TuiScreenInteractive, ConsoleKeyInfo>> MatrixPointerX X index of the selected element in the matrix public virtual uint MatrixPointerX { get; set; } Property Value uint MatrixPointerY Y index of the selected element in the matrix public virtual uint MatrixPointerY { get; set; } Property Value uint Playing If the screen is playing or not public bool Playing { get; } Property Value bool Selected Currently selected element public TuiSelectable Selected { get; } Property Value TuiSelectable SelectionMatrix 2d matrix of the elements, ordered and positioned in the way it is wanted public TuiSelectable[,] SelectionMatrix { get; set; } Property Value TuiSelectable[,] Methods DeleteAllKeyEvents() Clears all existent key events. Useful because there are some default ones. Returns itself public TuiScreenInteractive DeleteAllKeyEvents() Returns TuiScreenInteractive HandleKey(ConsoleKeyInfo) Handle a key press public bool HandleKey(ConsoleKeyInfo keyInfo) Parameters keyInfo ConsoleKeyInfo Returns bool MoveDown(TuiScreenInteractive, ConsoleKeyInfo) Move the selected pointer down (y positive) public static void MoveDown(TuiScreenInteractive s, ConsoleKeyInfo ck) Parameters s TuiScreenInteractive ck ConsoleKeyInfo MoveLeft(TuiScreenInteractive, ConsoleKeyInfo) Move the selected pointer left (x negative) public static void MoveLeft(TuiScreenInteractive s, ConsoleKeyInfo ck) Parameters s TuiScreenInteractive ck ConsoleKeyInfo MoveRight(TuiScreenInteractive, ConsoleKeyInfo) Move the selected pointer right (x positive) public static void MoveRight(TuiScreenInteractive s, ConsoleKeyInfo ck) Parameters s TuiScreenInteractive ck ConsoleKeyInfo MoveUp(TuiScreenInteractive, ConsoleKeyInfo) Move the selected pointer up (y negative) public static void MoveUp(TuiScreenInteractive s, ConsoleKeyInfo ck) Parameters s TuiScreenInteractive ck ConsoleKeyInfo Play() Plays the interactive screen. Handles all key presses public void Play() Stop() Stop playing public void Stop() StopPlaying(TuiScreenInteractive, ConsoleKeyInfo) Stop a screen playing public static void StopPlaying(TuiScreenInteractive s, ConsoleKeyInfo ck) Parameters s TuiScreenInteractive ck ConsoleKeyInfo SubKeyEvent(ConsoleKey, Action<TuiScreenInteractive, ConsoleKeyInfo>) Adds a new key event with no modifiers and returns itself public TuiScreenInteractive SubKeyEvent(ConsoleKey k, Action<TuiScreenInteractive, ConsoleKeyInfo> keyFunction) Parameters k ConsoleKey keyFunction Action<TuiScreenInteractive, ConsoleKeyInfo> Returns TuiScreenInteractive SubKeyEvent(ConsoleKey, ConsoleModifiers, Action<TuiScreenInteractive, ConsoleKeyInfo>) Adds a new key event and returns itself public TuiScreenInteractive SubKeyEvent(ConsoleKey k, ConsoleModifiers m, Action<TuiScreenInteractive, ConsoleKeyInfo> keyFunction) Parameters k ConsoleKey m ConsoleModifiers keyFunction Action<TuiScreenInteractive, ConsoleKeyInfo> Returns TuiScreenInteractive"
  },
  "api/AshConsoleGraphics.Interactive.TuiScrollingScreenInteractive.html": {
    "href": "api/AshConsoleGraphics.Interactive.TuiScrollingScreenInteractive.html",
    "title": "Class TuiScrollingScreenInteractive | AshConsoleGraphics",
    "summary": "Class TuiScrollingScreenInteractive Namespace AshConsoleGraphics.Interactive Assembly AshConsoleGraphics.dll Interactive screen that scrolls if items are out of bounds public class TuiScrollingScreenInteractive : TuiScreenInteractive, IEnumerable<TuiElement>, IEnumerable Inheritance object TuiElement TuiScreen TuiScreenInteractive TuiScrollingScreenInteractive Implements IEnumerable<TuiElement> IEnumerable Inherited Members TuiScreenInteractive.SelectionMatrix TuiScreenInteractive.Selected TuiScreenInteractive.Playing TuiScreenInteractive.KeyFunctions TuiScreenInteractive.WaitForKey TuiScreenInteractive.FinishPlayCycleEvent TuiScreenInteractive.SubKeyEvent(ConsoleKey, ConsoleModifiers, Action<TuiScreenInteractive, ConsoleKeyInfo>) TuiScreenInteractive.SubKeyEvent(ConsoleKey, Action<TuiScreenInteractive, ConsoleKeyInfo>) TuiScreenInteractive.DeleteAllKeyEvents() TuiScreenInteractive.Play() TuiScreenInteractive.HandleKey(ConsoleKeyInfo) TuiScreenInteractive.Stop() TuiScreenInteractive.StopPlaying(TuiScreenInteractive, ConsoleKeyInfo) TuiScreenInteractive.MoveRight(TuiScreenInteractive, ConsoleKeyInfo) TuiScreenInteractive.MoveLeft(TuiScreenInteractive, ConsoleKeyInfo) TuiScreenInteractive.MoveDown(TuiScreenInteractive, ConsoleKeyInfo) TuiScreenInteractive.MoveUp(TuiScreenInteractive, ConsoleKeyInfo) TuiScreen.Elements TuiScreen.Xsize TuiScreen.Ysize TuiScreen.OnResize TuiScreen.AutoResize TuiScreen.DefFormat TuiScreen.GetEnumerator() TuiScreen.Print() TuiScreen.BufferNeedsToBeGenerated() TuiScreen.SetAllNoNeedGenerateBuffer() TuiElement.OffsetX TuiElement.OffsetY TuiElement.Placement TuiElement.Buffer TuiElement.needToGenBuffer TuiElement.OnParentResize TuiElement.TriggerUpdate() TuiElement.GetTopLeftPosition(int, int) object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Constructors TuiScrollingScreenInteractive(int, int, TuiSelectable[,], uint, uint, Placement, int, int, CharFormat?, params TuiElement[]) Initializes a new interactive screen public TuiScrollingScreenInteractive(int xs, int ys, TuiSelectable[,] sm, uint startX, uint startY, Placement p, int x, int y, CharFormat? f, params TuiElement[] e) Parameters xs int The x size ys int The y size sm TuiSelectable[,] Selectable matrix startX uint Start X index in the selectable matrix startY uint Start Y index in the selectable matrix p Placement x int y int f CharFormat The default format e TuiElement[] Additional elements TuiScrollingScreenInteractive(int, int, TuiSelectable[,], uint, uint, CharFormat?, params TuiElement[]) Initializes a new interactive screen public TuiScrollingScreenInteractive(int xs, int ys, TuiSelectable[,] sm, uint startX, uint startY, CharFormat? f, params TuiElement[] e) Parameters xs int The x size ys int The y size sm TuiSelectable[,] Selectable matrix startX uint Start X index in the selectable matrix startY uint Start Y index in the selectable matrix f CharFormat The default format e TuiElement[] Additional elements Properties MatrixPointerX X index of the selected element in the matrix public override uint MatrixPointerX { get; set; } Property Value uint MatrixPointerY Y index of the selected element in the matrix public override uint MatrixPointerY { get; set; } Property Value uint ScrollX public int ScrollX { get; } Property Value int ScrollY public int ScrollY { get; } Property Value int Methods GenerateBuffer() The method that generates the element's buffer protected override Buffer GenerateBuffer() Returns Buffer"
  },
  "api/AshConsoleGraphics.Interactive.TuiSelectable.html": {
    "href": "api/AshConsoleGraphics.Interactive.TuiSelectable.html",
    "title": "Class TuiSelectable | AshConsoleGraphics",
    "summary": "Class TuiSelectable Namespace AshConsoleGraphics.Interactive Assembly AshConsoleGraphics.dll An interactive element that can be selected and does things public abstract class TuiSelectable : TuiElement Inheritance object TuiElement TuiSelectable Derived TuiButton TuiCheckBox TuiFramedRadio TuiNumberPicker TuiOptionPicker TuiWritable Inherited Members TuiElement.OffsetX TuiElement.OffsetY TuiElement.Placement TuiElement.Buffer TuiElement.needToGenBuffer TuiElement.OnParentResize TuiElement.GenerateBuffer() TuiElement.TriggerUpdate() TuiElement.BufferNeedsToBeGenerated() TuiElement.GetTopLeftPosition(int, int) object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Constructors TuiSelectable(Placement, int, int) Initializes a new selectable element protected TuiSelectable(Placement p, int x, int y) Parameters p Placement The relative placement method x int The relative x offset y int The relative x offset Properties KeyFunctions Keybinds and their actions public Dictionary<(ConsoleKey, ConsoleModifiers), Action<TuiSelectable, ConsoleKeyInfo>> KeyFunctions { get; } Property Value Dictionary<(ConsoleKey, ConsoleModifiers), Action<TuiSelectable, ConsoleKeyInfo>> Selected If it is selected or not public bool Selected { get; } Property Value bool Methods DeleteAllKeyEvents() Deletes all key events public TuiSelectable DeleteAllKeyEvents() Returns TuiSelectable HandleKey(ConsoleKeyInfo) Handles a key press public virtual bool HandleKey(ConsoleKeyInfo keyInfo) Parameters keyInfo ConsoleKeyInfo Returns bool SubKeyEvent(ConsoleKey, Action<TuiSelectable, ConsoleKeyInfo>) Subscribes a new key event with no modifiers public TuiSelectable SubKeyEvent(ConsoleKey k, Action<TuiSelectable, ConsoleKeyInfo> keyFunction) Parameters k ConsoleKey The key pressed keyFunction Action<TuiSelectable, ConsoleKeyInfo> The action to call Returns TuiSelectable SubKeyEvent(ConsoleKey, ConsoleModifiers, Action<TuiSelectable, ConsoleKeyInfo>) Subscribes a new key event public TuiSelectable SubKeyEvent(ConsoleKey k, ConsoleModifiers m, Action<TuiSelectable, ConsoleKeyInfo> keyFunction) Parameters k ConsoleKey The key pressed m ConsoleModifiers The key modifiers (cntrl, shift) keyFunction Action<TuiSelectable, ConsoleKeyInfo> The action to call Returns TuiSelectable Events OnSelection public event EventHandler OnSelection Event Type EventHandler"
  },
  "api/AshConsoleGraphics.Interactive.TuiWritable.html": {
    "href": "api/AshConsoleGraphics.Interactive.TuiWritable.html",
    "title": "Class TuiWritable | AshConsoleGraphics",
    "summary": "Class TuiWritable Namespace AshConsoleGraphics.Interactive Assembly AshConsoleGraphics.dll Elements where you can write public abstract class TuiWritable : TuiSelectable Inheritance object TuiElement TuiSelectable TuiWritable Derived TuiFramedScrollingTextBox TuiFramedTextBox TuiMultiLineFramedTextBox TuiMultiLineScrollingFramedTextBox Inherited Members TuiSelectable.Selected TuiSelectable.OnSelection TuiSelectable.KeyFunctions TuiSelectable.SubKeyEvent(ConsoleKey, ConsoleModifiers, Action<TuiSelectable, ConsoleKeyInfo>) TuiSelectable.SubKeyEvent(ConsoleKey, Action<TuiSelectable, ConsoleKeyInfo>) TuiSelectable.DeleteAllKeyEvents() TuiElement.OffsetX TuiElement.OffsetY TuiElement.Placement TuiElement.Buffer TuiElement.needToGenBuffer TuiElement.OnParentResize TuiElement.GenerateBuffer() TuiElement.TriggerUpdate() TuiElement.BufferNeedsToBeGenerated() TuiElement.GetTopLeftPosition(int, int) object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Constructors TuiWritable(string, int, Placement, int, int) Base constructor protected TuiWritable(string t, int l, Placement p, int x, int y) Parameters t string Initial text l int length p Placement x int y int Properties CanWriteChar Determines if a char can be written, and returns the string to add to text if possible, null otherwise public Func<char, string?> CanWriteChar { get; set; } Property Value Func<char, string> Length The maximum length you can write public int Length { get; set; } Property Value int Text The written text public string Text { get; set; } Property Value string Methods DelChar() Attempts to delete a char from the end of the text public virtual bool DelChar() Returns bool If it was posible to delete HandleKey(ConsoleKeyInfo) Handles a key press public override sealed bool HandleKey(ConsoleKeyInfo keyInfo) Parameters keyInfo ConsoleKeyInfo Returns bool Events OnLengthChange Will be called when length changes public event EventHandler OnLengthChange Event Type EventHandler"
  },
  "api/AshConsoleGraphics.Interactive.html": {
    "href": "api/AshConsoleGraphics.Interactive.html",
    "title": "Namespace AshConsoleGraphics.Interactive | AshConsoleGraphics",
    "summary": "Namespace AshConsoleGraphics.Interactive Classes MultipleTuiScreenInteractive Screen aimed at handling having multiple interactive screens at the same time, and only controlling one TuiButton A label pressable with enter TuiCheckBox Checkbox (on/off) TuiFramedCheckBox Checkbox (on/off) with a frame TuiFramedRadio Radio button: two options, either one or the other TuiFramedScrollingTextBox A textbox where you can write inside a frame and it lets you write longer than the visible length of the box TuiFramedTextBox A textbox where you can write inside a frame TuiMultiLineFramedTextBox A textbox where you can write inside a frame that can be several lines in height TuiMultiLineScrollingFramedTextBox A textbox where you can write inside a frame that can be several lines in height and scrolls TuiNumberPicker Lets you pick between a number range with the lateral arrows TuiOptionPicker Lets you pick options with the lateral arrows TuiScreenInteractive Interactive screen with selectables and key actions TuiScrollingScreenInteractive Interactive screen that scrolls if items are out of bounds TuiSelectable An interactive element that can be selected and does things TuiWritable Elements where you can write"
  },
  "api/AshConsoleGraphics.Placement.html": {
    "href": "api/AshConsoleGraphics.Placement.html",
    "title": "Enum Placement | AshConsoleGraphics",
    "summary": "Enum Placement Namespace AshConsoleGraphics Assembly AshConsoleGraphics.dll The relative placement of TuiElements respect to its parent Screen public enum Placement Fields BottomCenter = 8 BottomLeft = 3 BottomRight = 4 Center = 0 CenterLeft = 5 CenterRight = 6 TopCenter = 7 TopLeft = 1 TopRight = 2"
  },
  "api/AshConsoleGraphics.ResizeArgs.html": {
    "href": "api/AshConsoleGraphics.ResizeArgs.html",
    "title": "Class ResizeArgs | AshConsoleGraphics",
    "summary": "Class ResizeArgs Namespace AshConsoleGraphics Assembly AshConsoleGraphics.dll public class ResizeArgs : EventArgs Inheritance object EventArgs ResizeArgs Inherited Members EventArgs.Empty object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Constructors ResizeArgs(int, int) public ResizeArgs(int x, int y) Parameters x int y int Fields X public readonly int X Field Value int Y public readonly int Y Field Value int"
  },
  "api/AshConsoleGraphics.TuiConnectedLinesScreen.html": {
    "href": "api/AshConsoleGraphics.TuiConnectedLinesScreen.html",
    "title": "Class TuiConnectedLinesScreen | AshConsoleGraphics",
    "summary": "Class TuiConnectedLinesScreen Namespace AshConsoleGraphics Assembly AshConsoleGraphics.dll Screen with elements that connect like lines public class TuiConnectedLinesScreen : TuiScreen, IEnumerable<TuiElement>, IEnumerable Inheritance object TuiElement TuiScreen TuiConnectedLinesScreen Implements IEnumerable<TuiElement> IEnumerable Inherited Members TuiScreen.Elements TuiScreen.Xsize TuiScreen.Ysize TuiScreen.OnResize TuiScreen.AutoResize TuiScreen.DefFormat TuiScreen.GetEnumerator() TuiScreen.Print() TuiScreen.BufferNeedsToBeGenerated() TuiScreen.SetAllNoNeedGenerateBuffer() TuiElement.OffsetX TuiElement.OffsetY TuiElement.Placement TuiElement.Buffer TuiElement.needToGenBuffer TuiElement.OnParentResize TuiElement.TriggerUpdate() TuiElement.GetTopLeftPosition(int, int) object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Constructors TuiConnectedLinesScreen(int, int, IEnumerable<ILineElement>, Placement, int, int, CharFormat?) Initializes a new line screen with default chars public TuiConnectedLinesScreen(int xs, int ys, IEnumerable<ILineElement> i, Placement p, int x, int y, CharFormat? f) Parameters xs int The x size ys int The y size i IEnumerable<ILineElement> The lined elements p Placement x int y int f CharFormat The default format TuiConnectedLinesScreen(int, int, IEnumerable<ILineElement>, CharFormat?) Initializes a new line screen with top left position and default chars public TuiConnectedLinesScreen(int xs, int ys, IEnumerable<ILineElement> i, CharFormat? f) Parameters xs int The x size ys int The y size i IEnumerable<ILineElement> The lined elements f CharFormat The default format TuiConnectedLinesScreen(string, int, int, IEnumerable<ILineElement>, Placement, int, int, CharFormat?) Initializes a new line screen public TuiConnectedLinesScreen(string chars, int xs, int ys, IEnumerable<ILineElement> i, Placement p, int x, int y, CharFormat? f) Parameters chars string The line charachters xs int The x size ys int The y size i IEnumerable<ILineElement> The lined elements p Placement x int y int f CharFormat The default format Exceptions ArgumentException Thrown when chars is null or it is not 16 chars long TuiConnectedLinesScreen(string, int, int, IEnumerable<ILineElement>, CharFormat?) Initializes a new line screen with top left position public TuiConnectedLinesScreen(string chars, int xs, int ys, IEnumerable<ILineElement> i, CharFormat? f) Parameters chars string The line charachters xs int The x size ys int The y size i IEnumerable<ILineElement> The lined elements f CharFormat The default format Exceptions ArgumentException Thrown when chars is null or it is not 16 chars long Properties Chars The 16 connected line charachters. An example would be \"·───│┌┐┬│└┘┴│├┤┼\" public char[] Chars { get; set; } Property Value char[] Methods GenerateBuffer() The method that generates the element's buffer protected override Buffer GenerateBuffer() Returns Buffer"
  },
  "api/AshConsoleGraphics.TuiElement.html": {
    "href": "api/AshConsoleGraphics.TuiElement.html",
    "title": "Class TuiElement | AshConsoleGraphics",
    "summary": "Class TuiElement Namespace AshConsoleGraphics Assembly AshConsoleGraphics.dll Element of a screen public abstract class TuiElement Inheritance object TuiElement Derived TuiSelectable TuiFrame TuiHorizontalLine TuiLabel TuiLog TuiMultipleLabels TuiProgressBar TuiRectangle TuiScreen TuiTwoLabels TuiVerticalLine Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Constructors TuiElement(Placement, int, int) Initializes a new element protected TuiElement(Placement p, int x, int y) Parameters p Placement The relative placement method x int The relative x offset y int The relative x offset Properties Buffer public Buffer Buffer { get; } Property Value Buffer OffsetX Offset in the X coordinate from its relative position public int OffsetX { get; set; } Property Value int OffsetY Offset in the Y coordinate from its relative position public int OffsetY { get; set; } Property Value int Placement Relative placement to its parent screen public Placement Placement { get; set; } Property Value Placement needToGenBuffer Set this to true when the buffer needs to be regenerated protected bool needToGenBuffer { get; set; } Property Value bool Methods BufferNeedsToBeGenerated() In most cases, the base implementation is enough protected virtual bool BufferNeedsToBeGenerated() Returns bool GenerateBuffer() The method that generates the element's buffer protected abstract Buffer GenerateBuffer() Returns Buffer GetTopLeftPosition(int, int) public (int, int) GetTopLeftPosition(int Xsize, int Ysize) Parameters Xsize int Ysize int Returns (int, int) TriggerUpdate() public void TriggerUpdate() Events OnParentResize Will be called when parent screen resizes public event EventHandler<ResizeArgs> OnParentResize Event Type EventHandler<ResizeArgs>"
  },
  "api/AshConsoleGraphics.TuiFrame.html": {
    "href": "api/AshConsoleGraphics.TuiFrame.html",
    "title": "Class TuiFrame | AshConsoleGraphics",
    "summary": "Class TuiFrame Namespace AshConsoleGraphics Assembly AshConsoleGraphics.dll An empty on the inside frame with 8 different charachters public class TuiFrame : TuiElement, ILineElement Inheritance object TuiElement TuiFrame Implements ILineElement Inherited Members TuiElement.OffsetX TuiElement.OffsetY TuiElement.Placement TuiElement.Buffer TuiElement.needToGenBuffer TuiElement.OnParentResize TuiElement.TriggerUpdate() TuiElement.BufferNeedsToBeGenerated() TuiElement.GetTopLeftPosition(int, int) object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Constructors TuiFrame(int, int, Placement, int, int, CharFormat?) Initializes a new frame with the 8 default chars (single line) public TuiFrame(int xs, int ys, Placement p, int x, int y, CharFormat? f = null) Parameters xs int The x size ys int The y size p Placement x int y int f CharFormat The format TuiFrame(string, int, int, Placement, int, int, CharFormat?) Initializes a new frame public TuiFrame(string chars, int xs, int ys, Placement p, int x, int y, CharFormat? f = null) Parameters chars string The 8 needed chars xs int The x size ys int The y size p Placement x int y int f CharFormat The format Properties Chars All the 8 needed chars. An example would be \"┌┐└┘──││\" public char[] Chars { get; set; } Property Value char[] Format Charachter format public CharFormat? Format { get; set; } Property Value CharFormat Xsize public int Xsize { get; set; } Property Value int Ysize public int Ysize { get; set; } Property Value int Methods GenerateBitBuffer() public BitBuffer GenerateBitBuffer() Returns BitBuffer GenerateBuffer() The method that generates the element's buffer protected override Buffer GenerateBuffer() Returns Buffer"
  },
  "api/AshConsoleGraphics.TuiHorizontalLine.html": {
    "href": "api/AshConsoleGraphics.TuiHorizontalLine.html",
    "title": "Class TuiHorizontalLine | AshConsoleGraphics",
    "summary": "Class TuiHorizontalLine Namespace AshConsoleGraphics Assembly AshConsoleGraphics.dll Straight horizontal line public class TuiHorizontalLine : TuiElement, ILineElement Inheritance object TuiElement TuiHorizontalLine Implements ILineElement Inherited Members TuiElement.OffsetX TuiElement.OffsetY TuiElement.Placement TuiElement.Buffer TuiElement.needToGenBuffer TuiElement.OnParentResize TuiElement.TriggerUpdate() TuiElement.BufferNeedsToBeGenerated() TuiElement.GetTopLeftPosition(int, int) object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Constructors TuiHorizontalLine(int, char, Placement, int, int, CharFormat?) Initializes a new line public TuiHorizontalLine(int xs, char c, Placement p, int x, int y, CharFormat? f = null) Parameters xs int The x size c char The char p Placement x int y int f CharFormat The format Properties Char The carachter the line uses public char Char { get; set; } Property Value char Format Charachter format public CharFormat? Format { get; set; } Property Value CharFormat Xsize public int Xsize { get; set; } Property Value int Methods GenerateBitBuffer() public BitBuffer GenerateBitBuffer() Returns BitBuffer GenerateBuffer() The method that generates the element's buffer protected override Buffer GenerateBuffer() Returns Buffer"
  },
  "api/AshConsoleGraphics.TuiLabel.html": {
    "href": "api/AshConsoleGraphics.TuiLabel.html",
    "title": "Class TuiLabel | AshConsoleGraphics",
    "summary": "Class TuiLabel Namespace AshConsoleGraphics Assembly AshConsoleGraphics.dll Just some text public class TuiLabel : TuiElement Inheritance object TuiElement TuiLabel Inherited Members TuiElement.OffsetX TuiElement.OffsetY TuiElement.Placement TuiElement.Buffer TuiElement.needToGenBuffer TuiElement.OnParentResize TuiElement.TriggerUpdate() TuiElement.BufferNeedsToBeGenerated() TuiElement.GetTopLeftPosition(int, int) object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Constructors TuiLabel(string, Placement, int, int, CharFormat?) Initializes a new label public TuiLabel(string text, Placement p, int x, int y, CharFormat? f = null) Parameters text string The text p Placement x int y int f CharFormat The format Properties Format Charachter format public CharFormat? Format { get; set; } Property Value CharFormat Text public string Text { get; set; } Property Value string Methods GenerateBuffer() The method that generates the element's buffer protected override Buffer GenerateBuffer() Returns Buffer"
  },
  "api/AshConsoleGraphics.TuiLog.html": {
    "href": "api/AshConsoleGraphics.TuiLog.html",
    "title": "Class TuiLog | AshConsoleGraphics",
    "summary": "Class TuiLog Namespace AshConsoleGraphics Assembly AshConsoleGraphics.dll A rectangle for words that separates words into different lines public class TuiLog : TuiElement Inheritance object TuiElement TuiLog Inherited Members TuiElement.OffsetX TuiElement.OffsetY TuiElement.Placement TuiElement.Buffer TuiElement.needToGenBuffer TuiElement.OnParentResize TuiElement.TriggerUpdate() TuiElement.BufferNeedsToBeGenerated() TuiElement.GetTopLeftPosition(int, int) object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Constructors TuiLog(int, int, Placement, int, int, CharFormat?) Initializes a new log public TuiLog(int xs, int ys, Placement p, int x, int y, CharFormat? f = null) Parameters xs int ys int p Placement x int y int f CharFormat Properties Format Charachter format public CharFormat? Format { get; set; } Property Value CharFormat Scroll How much the text is scrolled public int Scroll { get; set; } Property Value int Text The whole text public string Text { get; set; } Property Value string Xsize public int Xsize { get; set; } Property Value int Ysize public int Ysize { get; set; } Property Value int Methods Append(string) Appends some text. Analog of Console.Write public void Append(string s) Parameters s string AppendLine(string) Appends some text and ends the line. Analog of Console.WriteLine public void AppendLine(string s) Parameters s string GenerateBuffer() The method that generates the element's buffer protected override Buffer GenerateBuffer() Returns Buffer"
  },
  "api/AshConsoleGraphics.TuiMultipleLabels.html": {
    "href": "api/AshConsoleGraphics.TuiMultipleLabels.html",
    "title": "Class TuiMultipleLabels | AshConsoleGraphics",
    "summary": "Class TuiMultipleLabels Namespace AshConsoleGraphics Assembly AshConsoleGraphics.dll Two labels side by side, left and right text public class TuiMultipleLabels : TuiElement Inheritance object TuiElement TuiMultipleLabels Inherited Members TuiElement.OffsetX TuiElement.OffsetY TuiElement.Placement TuiElement.Buffer TuiElement.needToGenBuffer TuiElement.OnParentResize TuiElement.TriggerUpdate() TuiElement.BufferNeedsToBeGenerated() TuiElement.GetTopLeftPosition(int, int) object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Constructors TuiMultipleLabels(IEnumerable<string>, Placement, int, int, IEnumerable<CharFormat?>) Initializes a new label public TuiMultipleLabels(IEnumerable<string> ts, Placement p, int x, int y, IEnumerable<CharFormat?> f = null) Parameters ts IEnumerable<string> p Placement x int y int f IEnumerable<CharFormat> The format Properties NumberOfLabels Count of labels public int NumberOfLabels { get; } Property Value int Methods GenerateBuffer() The method that generates the element's buffer protected override Buffer GenerateBuffer() Returns Buffer GetFormat(int) public CharFormat? GetFormat(int index) Parameters index int Returns CharFormat GetText(int) public string GetText(int index) Parameters index int Returns string SetFormat(int, CharFormat?) public bool SetFormat(int index, CharFormat? format) Parameters index int format CharFormat Returns bool SetText(int, string) public bool SetText(int index, string text) Parameters index int text string Returns bool"
  },
  "api/AshConsoleGraphics.TuiProgressBar.html": {
    "href": "api/AshConsoleGraphics.TuiProgressBar.html",
    "title": "Class TuiProgressBar | AshConsoleGraphics",
    "summary": "Class TuiProgressBar Namespace AshConsoleGraphics Assembly AshConsoleGraphics.dll A progress bar with a percentage of filled public class TuiProgressBar : TuiElement Inheritance object TuiElement TuiProgressBar Inherited Members TuiElement.OffsetX TuiElement.OffsetY TuiElement.Placement TuiElement.Buffer TuiElement.needToGenBuffer TuiElement.OnParentResize TuiElement.TriggerUpdate() TuiElement.BufferNeedsToBeGenerated() TuiElement.GetTopLeftPosition(int, int) object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Constructors TuiProgressBar(int, char, char, Placement, int, int, CharFormat?) Initializes a new progress bar with the same format for filled and not filled public TuiProgressBar(int xs, char c, char u, Placement p, int x, int y, CharFormat? f = null) Parameters xs int The x size c char The filled char u char The not filled char p Placement x int y int f CharFormat The format TuiProgressBar(int, char, char, Placement, int, int, CharFormat?, CharFormat?) Initializes a new progress bar public TuiProgressBar(int xs, char c, char u, Placement p, int x, int y, CharFormat? cf, CharFormat? uf) Parameters xs int The x size c char The filled char u char The not filled char p Placement x int y int cf CharFormat The filled char format uf CharFormat The not filled char format Properties CompleteChar The char of the filled part public char CompleteChar { get; set; } Property Value char CompleteFormat Complete Charachter format public CharFormat? CompleteFormat { get; set; } Property Value CharFormat IncompleteChar The char of the not filled part public char IncompleteChar { get; set; } Property Value char IncompleteFormat Incomplete Charachter format public CharFormat? IncompleteFormat { get; set; } Property Value CharFormat Percentage The percentage of the bar that is filled public int Percentage { get; set; } Property Value int Xsize public int Xsize { get; set; } Property Value int Methods GenerateBuffer() The method that generates the element's buffer protected override Buffer GenerateBuffer() Returns Buffer"
  },
  "api/AshConsoleGraphics.TuiRectangle.html": {
    "href": "api/AshConsoleGraphics.TuiRectangle.html",
    "title": "Class TuiRectangle | AshConsoleGraphics",
    "summary": "Class TuiRectangle Namespace AshConsoleGraphics Assembly AshConsoleGraphics.dll A solid rectangle of a single charachter public class TuiRectangle : TuiElement Inheritance object TuiElement TuiRectangle Derived TuiSquare Inherited Members TuiElement.OffsetX TuiElement.OffsetY TuiElement.Placement TuiElement.Buffer TuiElement.needToGenBuffer TuiElement.OnParentResize TuiElement.TriggerUpdate() TuiElement.BufferNeedsToBeGenerated() TuiElement.GetTopLeftPosition(int, int) object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Constructors TuiRectangle(char, int, int, Placement, int, int, CharFormat?) Initializes a new rectangle public TuiRectangle(char c, int xs, int ys, Placement p, int x, int y, CharFormat? f = null) Parameters c char The charachter xs int The x size ys int The y size p Placement x int y int f CharFormat The format Properties Char The charachter of the whole rectangle public char Char { get; set; } Property Value char Format Charachter format public CharFormat? Format { get; set; } Property Value CharFormat Xsize public int Xsize { get; set; } Property Value int Ysize public int Ysize { get; set; } Property Value int Methods GenerateBuffer() The method that generates the element's buffer protected override Buffer GenerateBuffer() Returns Buffer"
  },
  "api/AshConsoleGraphics.TuiScreen.html": {
    "href": "api/AshConsoleGraphics.TuiScreen.html",
    "title": "Class TuiScreen | AshConsoleGraphics",
    "summary": "Class TuiScreen Namespace AshConsoleGraphics Assembly AshConsoleGraphics.dll Element that has other elements and shows them all public class TuiScreen : TuiElement, IEnumerable<TuiElement>, IEnumerable Inheritance object TuiElement TuiScreen Implements IEnumerable<TuiElement> IEnumerable Derived MultipleTuiScreenInteractive TuiScreenInteractive TuiConnectedLinesScreen Inherited Members TuiElement.OffsetX TuiElement.OffsetY TuiElement.Placement TuiElement.Buffer TuiElement.needToGenBuffer TuiElement.OnParentResize TuiElement.TriggerUpdate() TuiElement.GetTopLeftPosition(int, int) object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Constructors TuiScreen(int, int, Placement, int, int, CharFormat?, params TuiElement[]) Initializes a new screen public TuiScreen(int xs, int ys, Placement p, int x, int y, CharFormat? f, params TuiElement[] e) Parameters xs int The x size ys int The y size p Placement x int y int f CharFormat The default format e TuiElement[] The elements TuiScreen(int, int, CharFormat?, params TuiElement[]) Initializes a new screen with top left placement public TuiScreen(int xs, int ys, CharFormat? f, params TuiElement[] e) Parameters xs int The x size ys int The y size f CharFormat The default format e TuiElement[] The elements Properties AutoResize If set to true, the screen will auto resize to the whole console size public bool AutoResize { get; set; } Property Value bool DefFormat Deafult char format public CharFormat? DefFormat { get; set; } Property Value CharFormat Elements List of child elements public ReactiveList<TuiElement> Elements { get; } Property Value ReactiveList<TuiElement> Xsize public int Xsize { get; set; } Property Value int Ysize public int Ysize { get; set; } Property Value int Methods BufferNeedsToBeGenerated() In most cases, the base implementation is enough protected override bool BufferNeedsToBeGenerated() Returns bool GenerateBuffer() The method that generates the element's buffer protected override Buffer GenerateBuffer() Returns Buffer GetEnumerator() Returns an enumerator that iterates through the collection. public IEnumerator<TuiElement> GetEnumerator() Returns IEnumerator<TuiElement> An enumerator that can be used to iterate through the collection. Print() Prints the screen into the console public void Print() SetAllNoNeedGenerateBuffer() protected void SetAllNoNeedGenerateBuffer() Events OnResize Action that takes place when the screen resizes public event EventHandler<ResizeArgs> OnResize Event Type EventHandler<ResizeArgs>"
  },
  "api/AshConsoleGraphics.TuiSquare.html": {
    "href": "api/AshConsoleGraphics.TuiSquare.html",
    "title": "Class TuiSquare | AshConsoleGraphics",
    "summary": "Class TuiSquare Namespace AshConsoleGraphics Assembly AshConsoleGraphics.dll A solid square of a single charachter public class TuiSquare : TuiRectangle Inheritance object TuiElement TuiRectangle TuiSquare Inherited Members TuiRectangle.Xsize TuiRectangle.Ysize TuiRectangle.Char TuiRectangle.Format TuiRectangle.GenerateBuffer() TuiElement.OffsetX TuiElement.OffsetY TuiElement.Placement TuiElement.Buffer TuiElement.needToGenBuffer TuiElement.OnParentResize TuiElement.TriggerUpdate() TuiElement.BufferNeedsToBeGenerated() TuiElement.GetTopLeftPosition(int, int) object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Constructors TuiSquare(char, int, Placement, int, int, CharFormat?) Initializes a new square public TuiSquare(char c, int s, Placement p, int x, int y, CharFormat? f = null) Parameters c char s int The x and y size p Placement x int y int f CharFormat"
  },
  "api/AshConsoleGraphics.TuiTwoLabels.html": {
    "href": "api/AshConsoleGraphics.TuiTwoLabels.html",
    "title": "Class TuiTwoLabels | AshConsoleGraphics",
    "summary": "Class TuiTwoLabels Namespace AshConsoleGraphics Assembly AshConsoleGraphics.dll Two labels side by side, left and right text public class TuiTwoLabels : TuiElement Inheritance object TuiElement TuiTwoLabels Inherited Members TuiElement.OffsetX TuiElement.OffsetY TuiElement.Placement TuiElement.Buffer TuiElement.needToGenBuffer TuiElement.OnParentResize TuiElement.TriggerUpdate() TuiElement.BufferNeedsToBeGenerated() TuiElement.GetTopLeftPosition(int, int) object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Constructors TuiTwoLabels(string, string, Placement, int, int, CharFormat?, CharFormat?) Initializes a new label public TuiTwoLabels(string textl, string textr, Placement p, int x, int y, CharFormat? lf = null, CharFormat? rf = null) Parameters textl string textr string p Placement x int y int lf CharFormat rf CharFormat Properties LeftFormat Left label format public CharFormat? LeftFormat { get; set; } Property Value CharFormat LeftText public string LeftText { get; set; } Property Value string RightFormat Right label format public CharFormat? RightFormat { get; set; } Property Value CharFormat RightText public string RightText { get; set; } Property Value string Methods GenerateBuffer() The method that generates the element's buffer protected override Buffer GenerateBuffer() Returns Buffer"
  },
  "api/AshConsoleGraphics.TuiVerticalLine.html": {
    "href": "api/AshConsoleGraphics.TuiVerticalLine.html",
    "title": "Class TuiVerticalLine | AshConsoleGraphics",
    "summary": "Class TuiVerticalLine Namespace AshConsoleGraphics Assembly AshConsoleGraphics.dll Straight vertical line public class TuiVerticalLine : TuiElement, ILineElement Inheritance object TuiElement TuiVerticalLine Implements ILineElement Inherited Members TuiElement.OffsetX TuiElement.OffsetY TuiElement.Placement TuiElement.Buffer TuiElement.needToGenBuffer TuiElement.OnParentResize TuiElement.TriggerUpdate() TuiElement.BufferNeedsToBeGenerated() TuiElement.GetTopLeftPosition(int, int) object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Constructors TuiVerticalLine(int, char, Placement, int, int, CharFormat?) Initializes a new line public TuiVerticalLine(int ys, char c, Placement p, int x, int y, CharFormat? f = null) Parameters ys int The y size c char The char p Placement x int y int f CharFormat The format Properties Char The carachter the line uses public char Char { get; set; } Property Value char Format Charachter format public CharFormat? Format { get; set; } Property Value CharFormat Ysize public int Ysize { get; set; } Property Value int Methods GenerateBitBuffer() public BitBuffer GenerateBitBuffer() Returns BitBuffer GenerateBuffer() The method that generates the element's buffer protected override Buffer GenerateBuffer() Returns Buffer"
  },
  "api/AshConsoleGraphics.html": {
    "href": "api/AshConsoleGraphics.html",
    "title": "Namespace AshConsoleGraphics | AshConsoleGraphics",
    "summary": "Namespace AshConsoleGraphics Classes BitBuffer Buffer for elements that are connected lines Buffer Char and color buffer used for generating elements ResizeArgs TuiConnectedLinesScreen Screen with elements that connect like lines TuiElement Element of a screen TuiFrame An empty on the inside frame with 8 different charachters TuiHorizontalLine Straight horizontal line TuiLabel Just some text TuiLog A rectangle for words that separates words into different lines TuiMultipleLabels Two labels side by side, left and right text TuiProgressBar A progress bar with a percentage of filled TuiRectangle A solid rectangle of a single charachter TuiScreen Element that has other elements and shows them all TuiSquare A solid square of a single charachter TuiTwoLabels Two labels side by side, left and right text TuiVerticalLine Straight vertical line Interfaces ILineElement Elements that can work as connected lines Enums Placement The relative placement of TuiElements respect to its parent Screen"
  },
  "docs/basic_elements.html": {
    "href": "docs/basic_elements.html",
    "title": "Basic elements | AshConsoleGraphics",
    "summary": "Basic elements TuiLabel This is the simplest of all elements. Its just text. We can initialize a new one like this: TuiLabel l = new TuiLabel(\"Hello, World!\", Placement.Center, 0, 0, new CharFormat(new Color3(\"FF00FF\"))); Here, all arguments are pretty self-explanatory. The last is the format. A null format means that the format will be whatever the screen dictates as default, and if that is null as well, the terminal default. Please note that element properties are not immutable, we can do the following: l.Text = \"Bye, World!\"; And that will trigger a buffer regeneration, but nothing you have to worry about ;) TuiHorizontalLine As its name implies, its just a horizontal line. We can initialize a new one like this: TuiHorizontalLine hl = new TuiHorizontalLine(10, '-', Placement.Center, 0, 0); You might notice no colors were specified here. Most elements have constructors without format, that just initialize them to null. We can, however, change this: hl.FgColor = Color3.Red; TuiProgressBar This is similar to a horizontal line, but as a simple progress bar. We can initialize a new one like this: TuiProgressBar pb = new TuiProgressBar(16, '@', '-', Placement.Center, 0, 0, new CharFormat(Color3.Yellow), new CharFormat(Color3.White)); Here, 16 is the size, and the next charachters are for the completed and the uncompleted part, respectively. Then, the 2 formats, the first is for the completed part, and the second are the uncompleted part. We can change its percentage of completion whenever we want: pb.Percentage = 50; This would set it to be 50% full. It goes from 0% to 100%. Other elements There are many more elements, like squares, rectanges, frames, vertical lines and more. Check the API for all the possibilities! The notions learnt here (mutable properties of elements, formats, constructors, etc.) apply to most elements and tend to be consistent. Don't be afraid to experiment!"
  },
  "docs/getting_started.html": {
    "href": "docs/getting_started.html",
    "title": "Getting Started | AshConsoleGraphics",
    "summary": "Getting Started Let's start! AshConsoleGraphics uses AshLib for its colors. The user is invited to use as many of their functionalities as well. To start using this library, add this using statement: using AshConsoleGraphics; This namespace contains all the basic elements and screens. If you want to create interactive screens, add: using AshConsoleGraphics.Interactive; Here you will find all selectables and interactive screens."
  },
  "docs/interactive_screens.html": {
    "href": "docs/interactive_screens.html",
    "title": "Interactive Screens | AshConsoleGraphics",
    "summary": "Interactive Screens Interactive screens manage selectables in a very easy way. First, they are placed inside a grid (2 dimensional array) so the user can navigate between them using the arrows(defaut behaviours, can be changed). Then, it handles key presses as necessary. Let's create an interactive screen. TuiScreenInteractive sb = new TuiScreen(100, 20, new TuiSelectable[,]{{new TuiButton(\"Button 1\", Placement.Center, 0, -2)}, {new TuiButton(\"Button 2\", Placement.Center, 0, 2)}}, 0, 0, new CharFormat(Color3.White, Color3.Black), new TuiLabel(\"Corner\", Placement.TopLeft, 0, 0)); Lets explain the arguments: First, two integers for the screen size. Then, the two dimensional array with the selectables. After that, the x and y index in the 2d array for the starting element, the one that starts out selected. Then, a format for the default format, respectively. Last, additional elements that are inside of the screen. This is a params argument, and you can specify as many as you want. Now, to play the screen interactively, we simply: s.Play(); This handles everything: printing, handling key presses and more. It happends inside a loop that wont break until a variable in the screen is set to false. Default behaviour is to break out with Escape, but this can be modified. There are many more options to these interactive screens, like having end of loop actions, auto-resize, on resize actions... Also, to work with multiple interactive screens at the same time there is a manager object, MultipleTuiScreenInteractive."
  },
  "docs/introduction.html": {
    "href": "docs/introduction.html",
    "title": "Introduction | AshConsoleGraphics",
    "summary": "Introduction In this article, the basic concepts of this library will be explained First, some quick note: About coordinates All across AshConsoleGraphics, where coordinates are used, X is for horizontal and Y is for vertical. Also, X increments from left to right and Y from top to bottom. Elements An element is an object that has a graphical representation of chars and Format(color, style) (a buffer). It can aditionally have functionality of some type, but the base is to give some graphical output. Screens A screen is an object that has multiple elements inside of it and is responsible for putting all of them together in a nice way for showing. A screen is also an element, so it can also be inside of another screen."
  },
  "docs/screens.html": {
    "href": "docs/screens.html",
    "title": "Screens | AshConsoleGraphics",
    "summary": "Screens Screens are the elements that control drawing. They have elements inside of them (potentially other screens!) and are responsible for drawing and controlling them. Let's create a screen. TuiScreen s = new TuiScreen(100, 20, new CharFormat(Color3.White, Color3.Black), new TuiLabel(\"Hello, World!\", Placement.Center, 0, 0, new CharFormat(new Color3(\"FF00FF\"))), new TuiLabel(\"How are you, World?\", Placement.Center, 0, 2, new CharFormat(new Color3(\"FF0000\")))); Lets explain the arguments: First, two integers for the screen size. In most terminals charachters are not square, and that is the reason for the difference in height and width. Then, two colors(null is valid too) for the default foreground and background color, respectively. Last, elements that are inside of the screen. This is a params argument, and you can specify as many as you want. Now, to print the screen to the console, simply: s.Print(); This puts the cursor at the start and prints the screen, generating it first if needed. Most objects (screens included) are well optimized and store their generated buffers, that way only when the object changes and the buffer is needed it generates it again. Usually you would want to use normal TuiScreen for static graphics, not interactive, and put the print statement inside of a loop or something, because that method just prints the screen. With interactive screens, it is much different!"
  },
  "docs/selectable_elements.html": {
    "href": "docs/selectable_elements.html",
    "title": "Selectable elements | AshConsoleGraphics",
    "summary": "Selectable elements Selectable elements are elements that provide some type of interactivity. They have a property called Selected, managed by interactive screens, that can modify their appareance. They can also provide key functionality, doing something when a key is pressed. Using this, there are TuiWritable elements that let you input text. You set up key actions like this: TuiSelectable s; s.SubKeyEvent(ConsoleKey.A, ConsoleModifiers.None, (sel, ck) => {doSomething();}); Lets see the most basic selectable, the button. TuiButton This is the simplest of all selectables. It is like a label, but when selected is surrounded by > <. This feature is common to most Selectables, and it is called internally Selectors. We can initialize a new button like this: TuiButton l = new TuiButton(\"Press me\", Placement.Center, 0, 0, new CharFormat(new Color3(\"FF00FF\")), new CharFormat(new Color3(\"FF00FF\")), new CharFormat(Color3.Yellow)); Here, the first 4 are pretty self-explanatory. The last 3 are (in order) the format of the text when not selected, the format of the text when selected and the format of the selector(obviously when selected). This constructor is the one that has the most formats, but there are other that provide with less formats and just put the same everywhere or things like that. Please refer to the API. This is common among many selectables, to have many constructors providing a lot of options for how many formats. Sometimes there is up to 6 formats so it can get pretty confusing. In those cases, please check the API for all the possible constructors and the order of their format arguments. The particularity with buttons is you can set actions triggered with Enter: l.SetAction((sel, ck) => {doSomething();}); This is an Action<TuiSelectable, ConsoleKeyInfo>, where the selectable is the caller (in this case the button) and the key is the key pressed (in this case enter with no modifers). TuiFramedCheckBox This is a simple checkbox with a frame around it. It is toggled by the use of Enter We can initialize a new one like this: TuiFramedCheckBox cb = new TuiFramedCheckBox(' ', 'X', false, Placement.Center, 0, 0, new CharFormat(new Color3.(255, 0, 100)), new CharFormat(Color3.Yellow)); The first two args are the charachters to diplay when the checkbox is not active(first) and active(second). Next, the initial activation state, and the position as usual. Last, two formats for the frame and the check and two other for the selectors. This is not the constructor with the most format arguments, there are many more options. Other selectable elements There are many more selectables, like option pickers, number pickers, radio buttons and more. Check the API for all the possibilities! There are also Writable elements, that let the user input text in many different ways. Check the base class here"
  },
  "examples/basic.html": {
    "href": "examples/basic.html",
    "title": "Basic example | AshConsoleGraphics",
    "summary": "Basic example We are going to make a simple hello world screen showing a label using System; using AshLib; //For colors using AshLib.Formatting; //For CharFormats using AshConsoleGraphics; class Program{ static void Main(){ Console.CursorVisible = false; //That way we wont see the cursor flashing TuiScreen screen = new TuiScreen(100, 20, null, null, new TuiLabel(\"Hello, World!\", Placement.Center, 0, 0, new CharFormat(Color3.Yellow))); screen.AutoResize = true; //If the console window resizes, so will the screen to fit all while(true){ screen.Print(); } } }"
  },
  "examples/cmdRedirection.html": {
    "href": "examples/cmdRedirection.html",
    "title": "Cmd redirection | AshConsoleGraphics",
    "summary": "Cmd redirection We are going to make a cmd terminal with custom colors, using the System Process class and the interactive elements using System; using System.Diagnostics; using System.IO; using AshLib; //For colors using AshLib.Formatting; //For CharFormat using AshConsoleGraphics; using AshConsoleGraphics.Interactive; class Program{ static void Main(){ Console.CursorVisible = false; //That way we wont see the cursor flashing //The input box TuiFramedScrollingTextBox input = new TuiFramedScrollingTextBox(\"\", 256, 32, Placement.BottomCenter, 0, 1, new CharFormat(new Color3(255, 100, 0)), new CharFormat(new Color3(255, 100, 0)), new CharFormat(new Color3(255, 100, 0)), new CharFormat(Color3.Yellow), new CharFormat(Color3.Yellow)); //The output log TuiLog output = new TuiLog(98, 9, Placement.TopCenter, 0, 1, new CharFormat(new Color3(255, 100, 0), Color3.Black)); //The matrix, that only has one element TuiSelectable[,] elements = new TuiSelectable[,]{ {input} }; //The interactive screen TuiScreenInteractive screen = new TuiScreenInteractive(100, 20, elements, 0, 0, new CharFormat(null, new Color3(30, 0, 0)), output); screen.AutoResize = true; //If the console window resizes, so will the screen to fit all //This will be called on resize screen.OnResize = (gs) => { Console.CursorVisible = false; //When window resizes, cursor pops back up //Adjust sizes input.BoxXsize = gs.Xsize - 4; output.Xsize = gs.Xsize - 6; output.Ysize = gs.Ysize - 6; }; //The cmd process Process commandLine = new Process{ StartInfo = new ProcessStartInfo{ FileName = \"cmd.exe\", RedirectStandardInput = true, RedirectStandardOutput = true, RedirectStandardError = true, UseShellExecute = false, CreateNoWindow = true } }; //Redirect output to the log commandLine.OutputDataReceived += (s, e) => { if(e.Data != null){ output.AppendLine(e.Data); }else{ output.AppendLine(\"\"); } }; //Redirect error output to the log commandLine.ErrorDataReceived += (s, e) => { if(e.Data != null){ output.AppendLine(e.Data); }else{ output.AppendLine(\"\"); } }; //Start the process commandLine.Start(); //Input writer StreamWriter inputWriter = commandLine.StandardInput; commandLine.BeginOutputReadLine(); commandLine.BeginErrorReadLine(); //Enter command with enter input.SubKeyEvent(ConsoleKey.Enter, (s, ck) => { inputWriter.WriteLine(input.Text); inputWriter.Flush(); input.Text = \"\"; }); commandLine.EnableRaisingEvents = true; //Stop the screen(thus exiting the program) when the process exits commandLine.Exited += (s, e) => { screen.Stop(); }; //Play the screen screen.Play(); } }"
  },
  "examples/lines.html": {
    "href": "examples/lines.html",
    "title": "Example with Connected Lines Screen | AshConsoleGraphics",
    "summary": "Example with Connected Lines Screen This is a bit chaotic, it's just to demonstrate the way to use Connected lines. using System; using AshLib; //For Colors using AshLib.Formatting; //For CharFormat using AshConsoleGraphics; class Program{ static void Main(){ Console.CursorVisible = false; //Example of use of connected lines screen TuiConnectedLinesScreen lines = new TuiConnectedLinesScreen(20, 20, new ILineElement[]{ new TuiHorizontalLine(10, 'a', Placement.Center, 0, 1), //In all of these, the char does not really matter new TuiHorizontalLine(12, 'a', Placement.TopLeft, 3, 9), new TuiHorizontalLine(17, 'a', Placement.Center, 0, -5), new TuiVerticalLine(13, 'a', Placement.Center, 0, -6), new TuiVerticalLine(8, 'a', Placement.TopRight, 0, 0), new TuiFrame(13, 14, Placement.Center, 0, 0)}, null); TuiScreen screen = new TuiScreen(100, 20, new CharFormat(null, new Color3(30, 0, 0)), lines); screen.Print(); Console.ReadKey(); //Dont exit immediately } }"
  },
  "examples/manyElements.html": {
    "href": "examples/manyElements.html",
    "title": "Example with Many Elements | AshConsoleGraphics",
    "summary": "Example with Many Elements This is a bit chaotic, it's just to demonstrate the way to use many different elements. DeltaHelper is used, a utility from AshLib. using System; using AshLib; using AshLib.Time; //For DeltaHelper using AshLib.Formatting; //For CharFormat using AshConsoleGraphics; using AshConsoleGraphics.Interactive; class Program{ static Random rand = new Random(); static void Main(){ TuiElement[] Elements = { new TuiLabel(\"FPS: 0\", Placement.TopLeft, 0, 0, new CharFormat(Color3.Yellow)), //Fps counter new TuiLabel(\"aaa\", Placement.BottomCenter, 0, 0, new CharFormat(new Color3(255, 120, 0))), new TuiButton(\"Hello!!\", Placement.TopLeft, 30, 2, new CharFormat(new Color3(23, 70, 255))), new TuiLabel(\"TestTestTest\", Placement.TopLeft, 30, 13), new TuiFrame(20, 10, Placement.TopLeft, 50, 7, new CharFormat(new Color3(0, 255, 0))), new TuiFramedTextBox(\"subi\", 5, Placement.TopLeft, 80, 10, new CharFormat(Color3.Cyan), new CharFormat(Color3.Magenta)), new TuiHorizontalLine(20, 'ñ', Placement.TopLeft, 5, 15, null) //Proof that charachters outside of ascii work as well }; AshConsoleGraphics.TuiScreen SmallScreen = new AshConsoleGraphics.TuiScreen(100, 30, new CharFormat(null, Color3.Black), Elements); AshConsoleGraphics.TuiScreen BigScreen = new AshConsoleGraphics.TuiScreen(100, 20, null, null, SmallScreen); DeltaHelper dh = new DeltaHelper(); //AshLib utility, used for calculating times. Here is used for FPS dh.Start(); while(true){ BigScreen.Print(); ((TuiLabel) Elements[0]).Text = \"FPS: \" + dh.stableFps; //Update FPS if(Console.KeyAvailable){ ConsoleKey k = Console.ReadKey(true).Key; if(k == ConsoleKey.A){ SmallScreen.Xsize = (1 + rand.Next(90)); //Randomize internal screen size SmallScreen.Ysize = (1 + rand.Next(16)); //Add another element BigScreen.Elements.Add(new AshConsoleGraphics.TuiLabel(\"bbb\", Placement.TopLeft, rand.Next(100), 1 + rand.Next(19), new CharFormat(new Color3((byte) rand.Next(256), (byte) rand.Next(256), (byte) rand.Next(256))))); }else if(k == ConsoleKey.Escape){ break; } } dh.Frame(); } } }"
  },
  "examples/matrix.html": {
    "href": "examples/matrix.html",
    "title": "Matrix-like falling text | AshConsoleGraphics",
    "summary": "Matrix-like falling text We are going to make a matrix-like falling text effect using System; using AshLib; //For colors using AshLib.Formatting; //For CharFormat using AshConsoleGraphics; using AshConsoleGraphics.Interactive; //This example might be really slow, depending on the size of the console window. It could also probably be otimized class Program{ static Random random = new Random(); //Used for generating the random chars static void Main(){ //We declare the Screen that will be used with null colors and no elements TuiScreenInteractive MatrixScreen = new TuiScreenInteractive(0, 0, null, 0, 0, null, null); //We set the screen to resize to the window size MatrixScreen.AutoResize = true; //On resize, generate all elements again MatrixScreen.OnResize = ((gs) => { MatrixScreen.Elements.Clear(); }); //Each loop, move each charachter down and if some pass, delete them. Then, add a new row at the top MatrixScreen.FinishPlayCycleEvent = ((gs) => { for(int i = 0; i < MatrixScreen.Elements.Count; i++){ TuiLabel l = (TuiLabel) MatrixScreen.Elements[i]; l.OffsetY++; if(l.OffsetY >= MatrixScreen.Ysize){ MatrixScreen.Elements.RemoveAt(i); i--; } } for(int i = 0; i < MatrixScreen.Xsize; i++){ if(random.Next(4) == 0){ MatrixScreen.Elements.Add(new TuiLabel(RandomChar(), Placement.TopLeft, i, 0, new CharFormat(new Color3(0, (byte) (100 + random.Next(155)), 0)))); } } }); //Play the screen, this is for allowing escape MatrixScreen.Play(); } static string RandomChar(){ //Little function to get a random charachter. 3 in 4 chance of being an space return ((char)random.Next(33, 127)).ToString(); } }"
  },
  "examples/matrix2.html": {
    "href": "examples/matrix2.html",
    "title": "Another Matrix-like falling text | AshConsoleGraphics",
    "summary": "Another Matrix-like falling text We are going to make another matrix-like falling text effect using System; using AshLib; //For colors using AshLib.Time; //For DeltaHelper using AshLib.Formatting; //For CharFormat using AshConsoleGraphics; using AshConsoleGraphics.Interactive; //This example might be really slow, depending on the size of the console window. It could also probably be otimized class Program{ static Random random = new Random(); //Used for generating the random chars static DeltaHelper dh = new DeltaHelper(); static void Main(){ //We declare the Screen that will be used with null colors and no elements TuiScreen MatrixScreen = new TuiScreen(0, 0, null); //We set the screen to resize to the window size MatrixScreen.AutoResize = true; List<TuiLabel> front = new(); List<TuiLabel> middle = new(); List<TuiLabel> back = new(); //On resize, generate all elements again MatrixScreen.OnResize += ((s, args) => { MatrixScreen.Elements.Clear(); front.Clear(); middle.Clear(); back.Clear(); }); dh.Start(); //counter int j = 0; while(true){ MatrixScreen.Print(); //Each loop, move each charachter down and if some pass, delete them. Then, add a new row at the top for(int i = 0; i < front.Count; i++){ TuiLabel l = front[i]; l.OffsetY++; if(l.OffsetY >= MatrixScreen.Ysize){ MatrixScreen.Elements.Remove(l); front.RemoveAt(i); i--; } } if(j % 3 == 0){ for(int i = 0; i < middle.Count; i++){ TuiLabel l = middle[i]; l.OffsetY++; if(l.OffsetY >= MatrixScreen.Ysize){ MatrixScreen.Elements.Remove(l); middle.RemoveAt(i); i--; } } } if(j % 5 == 0){ for(int i = 0; i < back.Count; i++){ TuiLabel l = back[i]; l.OffsetY++; if(l.OffsetY >= MatrixScreen.Ysize){ MatrixScreen.Elements.Remove(l); back.RemoveAt(i); i--; } } } //Generate new falling leters for(int i = 0; i < MatrixScreen.Xsize; i++){ switch(random.Next(500)){ case 0: case 1: string c = RandomChar(); TuiLabel l = new TuiLabel(c, Placement.TopLeft, i, 0, new CharFormat(new Color3(0, 230, 0))); MatrixScreen.Elements.Add(l); front.Add(l); l = new TuiLabel(c, Placement.TopLeft, i, -1, new CharFormat(new Color3(0, 160, 0))); MatrixScreen.Elements.Add(l); front.Add(l); l = new TuiLabel(c, Placement.TopLeft, i, -2, new CharFormat(new Color3(0, 90, 0))); MatrixScreen.Elements.Add(l); front.Add(l); l = new TuiLabel(c, Placement.TopLeft, i, -3, new CharFormat(new Color3(0, 40, 0))); MatrixScreen.Elements.Add(l); front.Add(l); break; case 2: c = RandomChar(); l = new TuiLabel(c, Placement.TopLeft, i, 0, new CharFormat(new Color3(0, 200, 0))); MatrixScreen.Elements.Add(l); middle.Add(l); l = new TuiLabel(c, Placement.TopLeft, i, -1, new CharFormat(new Color3(0, 130, 0))); MatrixScreen.Elements.Add(l); middle.Add(l); l = new TuiLabel(c, Placement.TopLeft, i, -2, new CharFormat(new Color3(0, 80, 0))); MatrixScreen.Elements.Add(l); middle.Add(l); l = new TuiLabel(c, Placement.TopLeft, i, -3, new CharFormat(new Color3(0, 30, 0))); MatrixScreen.Elements.Add(l); middle.Add(l); break; case 3: c = RandomChar(); l = new TuiLabel(c, Placement.TopLeft, i, 0, new CharFormat(new Color3(0, 180, 0))); MatrixScreen.Elements.Add(l); back.Add(l); l = new TuiLabel(c, Placement.TopLeft, i, -1, new CharFormat(new Color3(0, 120, 0))); MatrixScreen.Elements.Add(l); back.Add(l); l = new TuiLabel(c, Placement.TopLeft, i, -2, new CharFormat(new Color3(0, 70, 0))); MatrixScreen.Elements.Add(l); back.Add(l); l = new TuiLabel(c, Placement.TopLeft, i, -3, new CharFormat(new Color3(0, 30, 0))); MatrixScreen.Elements.Add(l); back.Add(l); break; } } j++; dh.TargetLazy(20); dh.Frame(); } } static string RandomChar(){ //Little function to get a random charachter return ((char)random.Next(33, 127)).ToString(); } }"
  },
  "examples/multipleScreens.html": {
    "href": "examples/multipleScreens.html",
    "title": "Example with Multiple Interactive Screens | AshConsoleGraphics",
    "summary": "Example with Multiple Interactive Screens This is a bit chaotic, it's just to demonstrate the way to use more than one interactive screen at once. using System; using System.Text; using AshLib; //For Colors using AshLib.Formatting; //For CharFormat using AshConsoleGraphics; using AshConsoleGraphics.Interactive; class Program{ static Random rand = new Random(); static void Main(){ Console.CursorVisible = false; string[] words = { //Some words for random generation \"hello\", \"never\", \"no\", \"yes\", \"bacon\", \"pig\", \"gloria\", \"order\", \"emperor\", \"hierarchy\", \"path\", \"file\", \"folder\", \"project\", \"hub\", \"ship\", \"space\", \"king\", \"rifle\", \"ammunition\", \"soldier\", \"war\", \"krieg\", \"windows\", \"linux\", \"version\", \"failed\", \"corrupted\", \"cancelled\", \"affirmative\", \"propose\", \"answer\", \"client\", \"connect\", \"server\", \"slave\", \"worker\", \"state\", \"viktor\", \"century\", \"millisecond\", \"double\", \"broker\", \"tsoy\", \"exception\", \"lord\", \"medieval\", \"partition\", \"resistance\", \"adder\", \"assembler\", \"type\", \"first\", \"second\", \"third\", \"fourth\", \"fifth\" }; //Declarations needed because the actions use them TuiScreenInteractive LeftScreen = null; TuiScreenInteractive RightScreen = null; TuiScreenInteractive AlternateScreen = null; MultipleTuiScreenInteractive BigScreen = null; CharFormat selected = new CharFormat(null, null, 1, null, null, false, null, false); //underlined TuiSelectable[,] LeftElements = null; LeftElements = new TuiSelectable[,]{ {new TuiFramedTextBox(\"\", 16, Placement.Center, 0, -3, null, null, null, new CharFormat(null, null, 1, null, Color3.Yellow, false, null, false), new CharFormat(Color3.Yellow))}, {new TuiButton(\"Set color\", Placement.Center, 0, 1, null, selected, new CharFormat(Color3.Yellow)).SetAction(setColor)}, {new TuiButton(\"Change screen\", Placement.Center, 0, 4, null, selected, new CharFormat(Color3.Yellow)).SetAction(goToOther2)} }; TuiSelectable[,] RightElements = null; RightElements = new TuiSelectable[,]{ {new TuiButton(\"Change screen\", Placement.Center, 0, 1, null, selected, new CharFormat(Color3.Yellow)).SetAction(goToOther)}, {new TuiButton(\"Change to another\", Placement.Center, 0, 2, null, selected, new CharFormat(Color3.Yellow)).SetAction(goToAlternate)}, {new TuiButton(\"Useless button that does nothing\", Placement.Center, 0, 4, null, selected, new CharFormat(Color3.Yellow)).SetAction(joke)}, {new TuiFramedCheckBox(' ', 'X', false, Placement.Center, 8, 7, null, null, null, new CharFormat(null, null, 1, null, Color3.Yellow, false, null, false), new CharFormat(Color3.Yellow))}, {new TuiFramedRadio(' ', 'X', \"Left: \", \"Right: \", Placement.Center, 0, 10, null, null, null, new CharFormat(null, null, 1, null, Color3.Yellow, false, null, false), null, null, new CharFormat(Color3.Yellow))}, }; TuiSelectable[,] AlternateElements = null; AlternateElements = new TuiSelectable[13, 12]; TuiButton change = new TuiButton(\"Change to alternate\", Placement.TopCenter, 0, 1, null, selected, new CharFormat(Color3.Yellow)).SetAction(goBack); //The entire top row for(int i = 0; i < 12; i++){ AlternateElements[0, i] = change; } //Populate the matrix for(int i = 0; i < 143; i++){ AlternateElements[1 + i / 12, i % 12] = new TuiFramedCheckBox(' ', 'X', rand.Next(7) != 1, Placement.TopLeft, 6 * (i % 12), 20 + 4 * (i / 12), null, null, null, new CharFormat(null, null, 1, null, Color3.Yellow, false, null, false), new CharFormat(Color3.Yellow)); } LeftScreen = new TuiScreenInteractive(50,20, LeftElements, 0, 1, new CharFormat(new Color3(255, 100, 0), new Color3(30, 0, 0)), new TuiLabel(\"Enter color:\", Placement.Center, -2, -5, null)); RightScreen = new TuiScreenInteractive(50,20, RightElements, 0, 0, Placement.TopRight, 0, 0, new CharFormat(new Color3(150, 0, 255), new Color3(0, 0, 30)), new TuiLog(48, 9, Placement.TopCenter, 0, 1, new CharFormat(Color3.White, Color3.Black)), new TuiLabel(\"Stop generating:\", Placement.Center, -2, 7, null)); AlternateScreen = new TuiScrollingScreenInteractive(50,20, AlternateElements, 0, 0, Placement.TopRight, 0, 0, new CharFormat(new Color3(0, 255, 0), new Color3(0, 30, 0))); BigScreen = new MultipleTuiScreenInteractive(101, 20, new TuiScreenInteractive[]{RightScreen, LeftScreen}, null, null, new TuiVerticalLine(20, '│', Placement.TopCenter, 0, 0, new CharFormat(Color3.Yellow))); //Need to set the first because default is none BigScreen.SelectedScreen = LeftScreen; BigScreen.AutoResize = true; //Resize logic is most elements resize accordingly BigScreen.OnResize += (s, args) => { Console.CursorVisible = false; LeftScreen.Xsize = args.X / 2 - 1; LeftScreen.Ysize = args.Y; RightScreen.Xsize = args.X / 2 - 1; RightScreen.Ysize = args.Y; AlternateScreen.Xsize = args.X / 2 - 1; AlternateScreen.Ysize = args.Y; ((TuiLog) RightScreen.Elements[0]).Xsize = RightScreen.Xsize - 4; ((TuiLog) RightScreen.Elements[0]).Ysize = RightScreen.Ysize / 2 - 1; ((TuiVerticalLine) BigScreen.Elements[0]).Ysize = BigScreen.Ysize; }; BigScreen.SubKeyEvent(ConsoleKey.W, (s, ck) => { ((TuiLog) RightScreen.Elements[0]).Scroll++; }); BigScreen.SubKeyEvent(ConsoleKey.S, (s, ck) => { ((TuiLog) RightScreen.Elements[0]).Scroll--; }); int j = 0; int c = 0; //Add words to the log BigScreen.FinishPlayCycleEvent = (sb) => { if(((TuiFramedCheckBox) RightElements[3,0]).Checked){ return; } j++; if(j == 10){ j = 0; ((TuiLog) RightScreen.Elements[0]).Append(generateContent(rand)); } if(c == 143){ return; //Do it only once } //Count how many are checked for(int i = 0; i < 143; i++){ if(((TuiFramedCheckBox)AlternateElements[1 + i / 12, i % 12]).Checked){ c++; } } if(c == 143){ ((TuiWritable) LeftElements[0,0]).Text = \"Good job!\"; }else{ c = 0; } }; BigScreen.Play(); void setColor(TuiSelectable e, ConsoleKeyInfo ck){ string t = ((TuiWritable) LeftElements[0,0]).Text; dynamic g = e; if(t == \"random\"){ g.TextFormat = new CharFormat(new Color3((byte) rand.Next(256), (byte) rand.Next(256), (byte) rand.Next(256))); g.SelectedTextFormat = g.TextFormat; }else if(Color3.TryParse(t, out Color3 c)){ g.TextFormat = new CharFormat(c); g.SelectedTextFormat = g.TextFormat; } } void joke(TuiSelectable e, ConsoleKeyInfo ck){ ((TuiWritable) LeftElements[0,0]).Text = \"SIKE!\"; } void goToOther(TuiSelectable e, ConsoleKeyInfo cki){ BigScreen.SelectedScreen = LeftScreen; } void goToOther2(TuiSelectable e, ConsoleKeyInfo ck){ BigScreen.SelectedScreen = RightScreen; } void goToAlternate(TuiSelectable e, ConsoleKeyInfo cki){ //Remove the other one BigScreen.ScreenList.Remove(RightScreen); BigScreen.Elements.Remove(RightScreen); //Add the new one BigScreen.ScreenList.Add(AlternateScreen); BigScreen.Elements.Add(AlternateScreen); BigScreen.SelectedScreen = AlternateScreen; } void goBack(TuiSelectable e, ConsoleKeyInfo cki){ BigScreen.ScreenList.Remove(AlternateScreen); BigScreen.Elements.Remove(AlternateScreen); BigScreen.ScreenList.Add(RightScreen); BigScreen.Elements.Add(RightScreen); BigScreen.SelectedScreen = LeftScreen; } string generateContent(Random ran){ StringBuilder sb = new StringBuilder(); int m = 1; for(int i = 0; i < m; i++){ sb.Append(words[ran.Next(words.Length)]); int h = ran.Next(18); if(h == 0){ sb.Append(Environment.NewLine); continue; }else if(h == 1){ sb.Append(\", \"); continue; }else if(h == 2){ sb.Append(\". \"); continue; } else if(h == 3){ sb.Append(\".\" + Environment.NewLine); continue; } sb.Append(\" \"); } return sb.ToString(); } Color3 generateColor(Random ran){ return new Color3((byte) ran.Next(256), (byte) ran.Next(256), (byte) ran.Next(256)); } } }"
  },
  "examples/scroll.html": {
    "href": "examples/scroll.html",
    "title": "Example with Connected Lines Screen | AshConsoleGraphics",
    "summary": "Example with Connected Lines Screen In here, we can see a crolling screen with numbers using System; using AshLib; //For colors using AshLib.Formatting; //For CharFormats using AshConsoleGraphics; using AshConsoleGraphics.Interactive; class Program{ static void Main(){ Console.CursorVisible = false; //That way we wont see the cursor flashing TuiSelectable[,] temp = new TuiSelectable[100, 1]; //Pre-allocate the selectable matrix for(int i = 0; i < 100; i++){ //Populate it temp[i, 0] = new TuiButton(i.ToString(), Placement.TopLeft, 0, i); } TuiScrollingScreenInteractive screen = new TuiScrollingScreenInteractive(100, 20, temp, 0, 0, null, new TuiLabel(\"Hello\", Placement.Center, 0, 0)); screen.AutoResize = true; //If the console window resizes, so will the screen to fit all screen.Play(); } }"
  },
  "index.html": {
    "href": "index.html",
    "title": "AshConsoleGraphics | AshConsoleGraphics",
    "summary": "AshConsoleGraphics AshConsoleGraphics is a library built in C# aimed at making good looking and rich in functionality console apps, while making it easy for the developer so they only have to worry about other things. You can go to the Introduction for starting. You can also check the API for the code usage details."
  }
}